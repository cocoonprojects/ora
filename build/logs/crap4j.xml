<?xml version="1.0" encoding="UTF-8"?>
<crap_result>
  <project/>
  <timestamp>2016-06-10 16:42:38</timestamp>
  <stats>
    <name>Method Crap Stats</name>
    <methodCount>1443</methodCount>
    <crapMethodCount>52</crapMethodCount>
    <crapLoad>468</crapLoad>
    <totalCrap>9592.92</totalCrap>
    <crapMethodPercent>3.6</crapMethodPercent>
  </stats>
  <methods>
    <method>
      <package>Accounting</package>
      <className>Module</className>
      <methodName>getControllerConfig</methodName>
      <methodSignature>getControllerConfig()</methodSignature>
      <fullMethod>getControllerConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Module</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($locator)</methodSignature>
      <fullMethod>anonymous function ($locator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Module</className>
      <methodName>getServiceConfig</methodName>
      <methodSignature>getServiceConfig()</methodSignature>
      <fullMethod>getServiceConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Module</className>
      <methodName>getConfig</methodName>
      <methodSignature>getConfig()</methodSignature>
      <fullMethod>getConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Module</className>
      <methodName>getAutoloaderConfig</methodName>
      <methodSignature>getAutoloaderConfig()</methodSignature>
      <fullMethod>getAutoloaderConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>create</methodName>
      <methodSignature>create(Organization $organization, User $createdBy, $name = null)</methodSignature>
      <fullMethod>create(Organization $organization, User $createdBy, $name = null)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>getName</methodName>
      <methodSignature>getName()</methodSignature>
      <fullMethod>getName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>getBalance</methodName>
      <methodSignature>getBalance()</methodSignature>
      <fullMethod>getBalance()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>getHolders</methodName>
      <methodSignature>getHolders()</methodSignature>
      <fullMethod>getHolders()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>getOrganizationId</methodName>
      <methodSignature>getOrganizationId()</methodSignature>
      <fullMethod>getOrganizationId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>deposit</methodName>
      <methodSignature>deposit($amount, User $holder, $description)</methodSignature>
      <fullMethod>deposit($amount, User $holder, $description)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>withdraw</methodName>
      <methodSignature>withdraw($amount, User $holder, $description)</methodSignature>
      <fullMethod>withdraw($amount, User $holder, $description)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>94.44</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>transferIn</methodName>
      <methodSignature>transferIn($amount, Account $payer, $description, User $by)</methodSignature>
      <fullMethod>transferIn($amount, Account $payer, $description, User $by)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>transferOut</methodName>
      <methodSignature>transferOut($amount, Account $payee, $description, User $by)</methodSignature>
      <fullMethod>transferOut($amount, Account $payee, $description, User $by)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>addHolder</methodName>
      <methodSignature>addHolder(User $holder, User $by)</methodSignature>
      <fullMethod>addHolder(User $holder, User $by)</fullMethod>
      <crap>2.01</crap>
      <complexity>2</complexity>
      <coverage>88.89</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>isHeldBy</methodName>
      <methodSignature>isHeldBy(User $user)</methodSignature>
      <fullMethod>isHeldBy(User $user)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>getResourceId</methodName>
      <methodSignature>getResourceId()</methodSignature>
      <fullMethod>getResourceId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>whenAccountCreated</methodName>
      <methodSignature>whenAccountCreated(AccountCreated $event)</methodSignature>
      <fullMethod>whenAccountCreated(AccountCreated $event)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>whenHolderAdded</methodName>
      <methodSignature>whenHolderAdded(HolderAdded $e)</methodSignature>
      <fullMethod>whenHolderAdded(HolderAdded $e)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>whenCreditsDeposited</methodName>
      <methodSignature>whenCreditsDeposited(CreditsDeposited $e)</methodSignature>
      <fullMethod>whenCreditsDeposited(CreditsDeposited $e)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>whenCreditsWithdrawn</methodName>
      <methodSignature>whenCreditsWithdrawn(CreditsWithdrawn $e)</methodSignature>
      <fullMethod>whenCreditsWithdrawn(CreditsWithdrawn $e)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>whenIncomingCreditsTransferred</methodName>
      <methodSignature>whenIncomingCreditsTransferred(IncomingCreditsTransferred $e)</methodSignature>
      <fullMethod>whenIncomingCreditsTransferred(IncomingCreditsTransferred $e)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Account</className>
      <methodName>whenOutgoingCreditsTransferred</methodName>
      <methodSignature>whenOutgoingCreditsTransferred(OutgoingCreditsTransferred $e)</methodSignature>
      <fullMethod>whenOutgoingCreditsTransferred(OutgoingCreditsTransferred $e)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Assertion</package>
      <className>AccountHolderAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Assertion</package>
      <className>MemberOfAccountOrganizationAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Balance</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($value, \DateTime $date)</methodSignature>
      <fullMethod>__construct($value, \DateTime $date)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Balance</className>
      <methodName>getValue</methodName>
      <methodSignature>getValue()</methodSignature>
      <fullMethod>getValue()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>Balance</className>
      <methodName>getDate</methodName>
      <methodSignature>getDate()</methodSignature>
      <fullMethod>getDate()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $organizationService, AccountService $accountService, UserService $userService)</methodSignature>
      <fullMethod>__construct(OrganizationService $organizationService, AccountService $accountService, UserService $userService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsController</className>
      <methodName>getList</methodName>
      <methodSignature>getList()</methodSignature>
      <fullMethod>getList()</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsController</className>
      <methodName>get</methodName>
      <methodSignature>get($id)</methodSignature>
      <fullMethod>get($id)</fullMethod>
      <crap>10</crap>
      <complexity>10</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsController</className>
      <methodName>getAccountService</methodName>
      <methodSignature>getAccountService()</methodSignature>
      <fullMethod>getAccountService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsController</className>
      <methodName>getUserService</methodName>
      <methodSignature>getUserService()</methodSignature>
      <fullMethod>getUserService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsController</className>
      <methodName>serializeAccount</methodName>
      <methodSignature>serializeAccount(Account $account)</methodSignature>
      <fullMethod>serializeAccount(Account $account)</fullMethod>
      <crap>12.53</crap>
      <complexity>8</complexity>
      <coverage>58.62</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(AccountService $accountService)</methodSignature>
      <fullMethod>__construct(AccountService $accountService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>12.29</crap>
      <complexity>11</complexity>
      <coverage>78</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsController</className>
      <methodName>getAccountService</methodName>
      <methodSignature>getAccountService()</methodSignature>
      <fullMethod>getAccountService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>IncomingTransfersController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>15.15</crap>
      <complexity>14</complexity>
      <coverage>81.94</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>MembersController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $organizationService, AccountService $accountService)</methodSignature>
      <fullMethod>__construct(OrganizationService $organizationService, AccountService $accountService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>MembersController</className>
      <methodName>get</methodName>
      <methodSignature>get($id)</methodSignature>
      <fullMethod>get($id)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>MembersController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OrganizationStatementController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(AccountService $accountService, Acl $acl, OrganizationService $organizationService)</methodSignature>
      <fullMethod>__construct(AccountService $accountService, Acl $acl, OrganizationService $organizationService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OrganizationStatementController</className>
      <methodName>getList</methodName>
      <methodSignature>getList()</methodSignature>
      <fullMethod>getList()</fullMethod>
      <crap>6.04</crap>
      <complexity>6</complexity>
      <coverage>90</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OrganizationStatementController</className>
      <methodName>getAccountService</methodName>
      <methodSignature>getAccountService()</methodSignature>
      <fullMethod>getAccountService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OrganizationStatementController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OrganizationStatementController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OutgoingTransfersController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>15.15</crap>
      <complexity>14</complexity>
      <coverage>81.94</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>PersonalStatementController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(
		AccountService $accountService,
		Acl $acl,
		OrganizationService $organizationService)</methodSignature>
      <fullMethod>__construct(
		AccountService $accountService,
		Acl $acl,
		OrganizationService $organizationService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>PersonalStatementController</className>
      <methodName>getList</methodName>
      <methodSignature>getList()</methodSignature>
      <fullMethod>getList()</fullMethod>
      <crap>6.04</crap>
      <complexity>6</complexity>
      <coverage>90</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>PersonalStatementController</className>
      <methodName>getAccountService</methodName>
      <methodSignature>getAccountService()</methodSignature>
      <fullMethod>getAccountService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>PersonalStatementController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>PersonalStatementController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>TransfersController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(AccountService $accountService, UserService $userService, OrganizationService $organizationService)</methodSignature>
      <fullMethod>__construct(AccountService $accountService, UserService $userService, OrganizationService $organizationService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>TransfersController</className>
      <methodName>getAccountService</methodName>
      <methodSignature>getAccountService()</methodSignature>
      <fullMethod>getAccountService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>TransfersController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>TransfersController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(AccountService $accountService)</methodSignature>
      <fullMethod>__construct(AccountService $accountService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalsController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>12.29</crap>
      <complexity>11</complexity>
      <coverage>78</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalsController</className>
      <methodName>getAccountService</methodName>
      <methodSignature>getAccountService()</methodSignature>
      <fullMethod>getAccountService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Account</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($id, Organization $organization)</methodSignature>
      <fullMethod>__construct($id, Organization $organization)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Account</className>
      <methodName>setBalance</methodName>
      <methodSignature>setBalance(Balance $balance)</methodSignature>
      <fullMethod>setBalance(Balance $balance)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Account</className>
      <methodName>getBalance</methodName>
      <methodSignature>getBalance()</methodSignature>
      <fullMethod>getBalance()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Account</className>
      <methodName>getHolders</methodName>
      <methodSignature>getHolders()</methodSignature>
      <fullMethod>getHolders()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Account</className>
      <methodName>addHolder</methodName>
      <methodSignature>addHolder(User $holder)</methodSignature>
      <fullMethod>addHolder(User $holder)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Account</className>
      <methodName>isHeldBy</methodName>
      <methodSignature>isHeldBy(User $user)</methodSignature>
      <fullMethod>isHeldBy(User $user)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Account</className>
      <methodName>getOrganization</methodName>
      <methodSignature>getOrganization()</methodSignature>
      <fullMethod>getOrganization()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Account</className>
      <methodName>getOrganizationId</methodName>
      <methodSignature>getOrganizationId()</methodSignature>
      <fullMethod>getOrganizationId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Account</className>
      <methodName>getName</methodName>
      <methodSignature>getName()</methodSignature>
      <fullMethod>getName()</fullMethod>
      <crap>2.06</crap>
      <complexity>2</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Balance</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($value, \DateTime $date)</methodSignature>
      <fullMethod>__construct($value, \DateTime $date)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Balance</className>
      <methodName>getValue</methodName>
      <methodSignature>getValue()</methodSignature>
      <fullMethod>getValue()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Balance</className>
      <methodName>getDate</methodName>
      <methodSignature>getDate()</methodSignature>
      <fullMethod>getDate()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Deposit</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(Account $payee, $amount = 0)</methodSignature>
      <fullMethod>__construct(Account $payee, $amount = 0)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Deposit</className>
      <methodName>getPayerName</methodName>
      <methodSignature>getPayerName()</methodSignature>
      <fullMethod>getPayerName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>OrganizationAccount</className>
      <methodName>getName</methodName>
      <methodSignature>getName()</methodSignature>
      <fullMethod>getName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>OrganizationAccount</className>
      <methodName>getResourceId</methodName>
      <methodSignature>getResourceId()</methodSignature>
      <fullMethod>getResourceId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>PersonalAccount</className>
      <methodName>getResourceId</methodName>
      <methodSignature>getResourceId()</methodSignature>
      <fullMethod>getResourceId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>getId</methodName>
      <methodSignature>getId()</methodSignature>
      <fullMethod>getId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>getCreatedAt</methodName>
      <methodSignature>getCreatedAt()</methodSignature>
      <fullMethod>getCreatedAt()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>setCreatedAt</methodName>
      <methodSignature>setCreatedAt(\DateTime $when)</methodSignature>
      <fullMethod>setCreatedAt(\DateTime $when)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>getCreatedBy</methodName>
      <methodSignature>getCreatedBy()</methodSignature>
      <fullMethod>getCreatedBy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>setCreatedBy</methodName>
      <methodSignature>setCreatedBy(BasicUser $user)</methodSignature>
      <fullMethod>setCreatedBy(BasicUser $user)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>getPayer</methodName>
      <methodSignature>getPayer()</methodSignature>
      <fullMethod>getPayer()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>getPayee</methodName>
      <methodSignature>getPayee()</methodSignature>
      <fullMethod>getPayee()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>setAmount</methodName>
      <methodSignature>setAmount($amount)</methodSignature>
      <fullMethod>setAmount($amount)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>getAmount</methodName>
      <methodSignature>getAmount()</methodSignature>
      <fullMethod>getAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>setDescription</methodName>
      <methodSignature>setDescription($description)</methodSignature>
      <fullMethod>setDescription($description)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>getDescription</methodName>
      <methodSignature>getDescription()</methodSignature>
      <fullMethod>getDescription()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>setBalance</methodName>
      <methodSignature>setBalance($balance)</methodSignature>
      <fullMethod>setBalance($balance)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>getBalance</methodName>
      <methodSignature>getBalance()</methodSignature>
      <fullMethod>getBalance()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>getPayerName</methodName>
      <methodSignature>getPayerName()</methodSignature>
      <fullMethod>getPayerName()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transaction</className>
      <methodName>getPayeeName</methodName>
      <methodSignature>getPayeeName()</methodSignature>
      <fullMethod>getPayeeName()</fullMethod>
      <crap>2.15</crap>
      <complexity>2</complexity>
      <coverage>66.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Transfer</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(Account $payer, Account $payee, $amount = 0)</methodSignature>
      <fullMethod>__construct(Account $payer, Account $payee, $amount = 0)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Withdrawal</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(Account $payer, $amount = 0)</methodSignature>
      <fullMethod>__construct(Account $payer, $amount = 0)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Entity</package>
      <className>Withdrawal</className>
      <methodName>getPayeeName</methodName>
      <methodSignature>getPayeeName()</methodSignature>
      <fullMethod>getPayeeName()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>IllegalAmountException</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($amount)</methodSignature>
      <fullMethod>__construct($amount)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>OrganizationAccount</className>
      <methodName>create</methodName>
      <methodSignature>create(Organization $organization, User $createdBy, $name = null)</methodSignature>
      <fullMethod>create(Organization $organization, User $createdBy, $name = null)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>OrganizationAccount</className>
      <methodName>getResourceId</methodName>
      <methodSignature>getResourceId()</methodSignature>
      <fullMethod>getResourceId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>AccountCommandsListener</className>
      <methodName>onAccountCreated</methodName>
      <methodSignature>onAccountCreated(StreamEvent $event)</methodSignature>
      <fullMethod>onAccountCreated(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>AccountCommandsListener</className>
      <methodName>onHolderAdded</methodName>
      <methodSignature>onHolderAdded(StreamEvent $event)</methodSignature>
      <fullMethod>onHolderAdded(StreamEvent $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>AccountCommandsListener</className>
      <methodName>onCreditsDeposited</methodName>
      <methodSignature>onCreditsDeposited(StreamEvent $event)</methodSignature>
      <fullMethod>onCreditsDeposited(StreamEvent $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>AccountCommandsListener</className>
      <methodName>onCreditsWithdrawn</methodName>
      <methodSignature>onCreditsWithdrawn(StreamEvent $event)</methodSignature>
      <fullMethod>onCreditsWithdrawn(StreamEvent $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>AccountCommandsListener</className>
      <methodName>onIncomingCreditsTransferred</methodName>
      <methodSignature>onIncomingCreditsTransferred(StreamEvent $event)</methodSignature>
      <fullMethod>onIncomingCreditsTransferred(StreamEvent $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>AccountCommandsListener</className>
      <methodName>onOutgoingCreditsTransferred</methodName>
      <methodSignature>onOutgoingCreditsTransferred(StreamEvent $event)</methodSignature>
      <fullMethod>onOutgoingCreditsTransferred(StreamEvent $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>AccountCommandsListener</className>
      <methodName>getPackage</methodName>
      <methodSignature>getPackage()</methodSignature>
      <fullMethod>getPackage()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>CreateOrganizationAccountListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(AccountService $accountService, OrganizationService $organizationService, UserService $userService)</methodSignature>
      <fullMethod>__construct(AccountService $accountService, OrganizationService $organizationService, UserService $userService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>CreateOrganizationAccountListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>CreateOrganizationAccountListener</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function(Event $event)</methodSignature>
      <fullMethod>anonymous function(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>CreateOrganizationAccountListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>CreatePersonalAccountListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(AccountService $accountService, UserService $userService, OrganizationService $organizationService)</methodSignature>
      <fullMethod>__construct(AccountService $accountService, UserService $userService, OrganizationService $organizationService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>CreatePersonalAccountListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>CreatePersonalAccountListener</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function(Event $event)</methodSignature>
      <fullMethod>anonymous function(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>CreatePersonalAccountListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountService</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(EventStore $eventStore, EntityManager $entityManager)</methodSignature>
      <fullMethod>__construct(EventStore $eventStore, EntityManager $entityManager)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountService</className>
      <methodName>createPersonalAccount</methodName>
      <methodSignature>createPersonalAccount(User $holder, Organization $organization)</methodSignature>
      <fullMethod>createPersonalAccount(User $holder, Organization $organization)</fullMethod>
      <crap>2.06</crap>
      <complexity>2</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountService</className>
      <methodName>createOrganizationAccount</methodName>
      <methodSignature>createOrganizationAccount(Organization $organization, User $holder)</methodSignature>
      <fullMethod>createOrganizationAccount(Organization $organization, User $holder)</fullMethod>
      <crap>3.33</crap>
      <complexity>3</complexity>
      <coverage>66.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountService</className>
      <methodName>getAccount</methodName>
      <methodSignature>getAccount($id)</methodSignature>
      <fullMethod>getAccount($id)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountService</className>
      <methodName>findAccounts</methodName>
      <methodSignature>findAccounts(User $holder, ReadModelOrganization $organization)</methodSignature>
      <fullMethod>findAccounts(User $holder, ReadModelOrganization $organization)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountService</className>
      <methodName>findAccount</methodName>
      <methodSignature>findAccount($id)</methodSignature>
      <fullMethod>findAccount($id)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountService</className>
      <methodName>findPersonalAccount</methodName>
      <methodSignature>findPersonalAccount($user, $organization)</methodSignature>
      <fullMethod>findPersonalAccount($user, $organization)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountService</className>
      <methodName>findOrganizationAccount</methodName>
      <methodSignature>findOrganizationAccount($organization)</methodSignature>
      <fullMethod>findOrganizationAccount($organization)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountService</className>
      <methodName>findTransactions</methodName>
      <methodSignature>findTransactions(ReadModelAccount $account, $limit, $offset, array $filters = [])</methodSignature>
      <fullMethod>findTransactions(ReadModelAccount $account, $limit, $offset, array $filters = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountService</className>
      <methodName>countTransactions</methodName>
      <methodSignature>countTransactions(ReadModelAccount $account, array $filters = [])</methodSignature>
      <fullMethod>countTransactions(ReadModelAccount $account, array $filters = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountService</className>
      <methodName>transfer</methodName>
      <methodSignature>transfer(Account $payer,Account $payee, $amount, $description, User $by)</methodSignature>
      <fullMethod>transfer(Account $payer,Account $payee, $amount, $description, User $by)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\View</package>
      <className>StatementJsonModel</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(Url $url, User $user, Acl $acl)</methodSignature>
      <fullMethod>__construct(Url $url, User $user, Acl $acl)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\View</package>
      <className>StatementJsonModel</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\View</package>
      <className>StatementJsonModel</className>
      <methodName>serializeLinks</methodName>
      <methodSignature>serializeLinks($account)</methodSignature>
      <fullMethod>serializeLinks($account)</fullMethod>
      <crap>7.07</crap>
      <complexity>7</complexity>
      <coverage>88.89</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\View</package>
      <className>StatementJsonModel</className>
      <methodName>serializeTransaction</methodName>
      <methodSignature>serializeTransaction(Transaction $transaction)</methodSignature>
      <fullMethod>serializeTransaction(Transaction $transaction)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\View</package>
      <className>StatementJsonModel</className>
      <methodName>evaluateTransactionType</methodName>
      <methodSignature>evaluateTransactionType(Transaction $transaction)</methodSignature>
      <fullMethod>evaluateTransactionType(Transaction $transaction)</fullMethod>
      <crap>15.4</crap>
      <complexity>7</complexity>
      <coverage>44.44</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\View</package>
      <className>StatementJsonModel</className>
      <methodName>serializeHolder</methodName>
      <methodSignature>serializeHolder(User $holder)</methodSignature>
      <fullMethod>serializeHolder(User $holder)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>CreateOrganizationProcessTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>CreateOrganizationProcessTest</className>
      <methodName>testCreationProcess</methodName>
      <methodSignature>testCreationProcess()</methodSignature>
      <fullMethod>testCreationProcess()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>UserSubscriptionProcessTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>UserSubscriptionProcessTest</className>
      <methodName>testSubscriptionProcess</methodName>
      <methodSignature>testSubscriptionProcess()</methodSignature>
      <fullMethod>testSubscriptionProcess()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>AccountTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>AccountTest</className>
      <methodName>testCreate</methodName>
      <methodSignature>testCreate()</methodSignature>
      <fullMethod>testCreate()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>AccountTest</className>
      <methodName>testAddHolder</methodName>
      <methodSignature>testAddHolder()</methodSignature>
      <fullMethod>testAddHolder()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>AccountTest</className>
      <methodName>testDeposit</methodName>
      <methodSignature>testDeposit()</methodSignature>
      <fullMethod>testDeposit()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>AccountTest</className>
      <methodName>testDepositWithNegativeAmount</methodName>
      <methodSignature>testDepositWithNegativeAmount()</methodSignature>
      <fullMethod>testDepositWithNegativeAmount()</fullMethod>
      <crap>1.12</crap>
      <complexity>1</complexity>
      <coverage>50</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>AccountTest</className>
      <methodName>testTransferIn</methodName>
      <methodSignature>testTransferIn()</methodSignature>
      <fullMethod>testTransferIn()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>AccountTest</className>
      <methodName>testTransferInWithNegativeAmount</methodName>
      <methodSignature>testTransferInWithNegativeAmount()</methodSignature>
      <fullMethod>testTransferInWithNegativeAmount()</fullMethod>
      <crap>1.04</crap>
      <complexity>1</complexity>
      <coverage>66.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>AccountTest</className>
      <methodName>testTransferOut</methodName>
      <methodSignature>testTransferOut()</methodSignature>
      <fullMethod>testTransferOut()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>AccountTest</className>
      <methodName>testTransferOuWithNegativeAmount</methodName>
      <methodSignature>testTransferOuWithNegativeAmount()</methodSignature>
      <fullMethod>testTransferOuWithNegativeAmount()</fullMethod>
      <crap>1.04</crap>
      <complexity>1</complexity>
      <coverage>66.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>BalanceTest</className>
      <methodName>testBalance</methodName>
      <methodSignature>testBalance()</methodSignature>
      <fullMethod>testBalance()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsControllerTest</className>
      <methodName>testGetListAsAnonymous</methodName>
      <methodSignature>testGetListAsAnonymous()</methodSignature>
      <fullMethod>testGetListAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsControllerTest</className>
      <methodName>testGetListAsOrganizationNotMember</methodName>
      <methodSignature>testGetListAsOrganizationNotMember()</methodSignature>
      <fullMethod>testGetListAsOrganizationNotMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsControllerTest</className>
      <methodName>testGetListWithoutCriteria</methodName>
      <methodSignature>testGetListWithoutCriteria()</methodSignature>
      <fullMethod>testGetListWithoutCriteria()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsControllerTest</className>
      <methodName>testGetListByEmail</methodName>
      <methodSignature>testGetListByEmail()</methodSignature>
      <fullMethod>testGetListByEmail()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsControllerTest</className>
      <methodName>testGetAsAnonymous</methodName>
      <methodSignature>testGetAsAnonymous()</methodSignature>
      <fullMethod>testGetAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsControllerTest</className>
      <methodName>testGetAsNotAuthorizedUser</methodName>
      <methodSignature>testGetAsNotAuthorizedUser()</methodSignature>
      <fullMethod>testGetAsNotAuthorizedUser()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsControllerTest</className>
      <methodName>testGetNotExistingAccount</methodName>
      <methodSignature>testGetNotExistingAccount()</methodSignature>
      <fullMethod>testGetNotExistingAccount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsControllerTest</className>
      <methodName>testGetEmptyAccount</methodName>
      <methodSignature>testGetEmptyAccount()</methodSignature>
      <fullMethod>testGetEmptyAccount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>AccountsControllerTest</className>
      <methodName>testGetAccount</methodName>
      <methodSignature>testGetAccount()</methodSignature>
      <fullMethod>testGetAccount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsControllerTest</className>
      <methodName>testInvoke</methodName>
      <methodSignature>testInvoke()</methodSignature>
      <fullMethod>testInvoke()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsControllerTest</className>
      <methodName>testInvokeWithFloatAmount</methodName>
      <methodSignature>testInvokeWithFloatAmount()</methodSignature>
      <fullMethod>testInvokeWithFloatAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsControllerTest</className>
      <methodName>testInvokeAsNotHolder</methodName>
      <methodSignature>testInvokeAsNotHolder()</methodSignature>
      <fullMethod>testInvokeAsNotHolder()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsControllerTest</className>
      <methodName>testInvokeWith0Amount</methodName>
      <methodSignature>testInvokeWith0Amount()</methodSignature>
      <fullMethod>testInvokeWith0Amount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsControllerTest</className>
      <methodName>testInvokeWithNoAmount</methodName>
      <methodSignature>testInvokeWithNoAmount()</methodSignature>
      <fullMethod>testInvokeWithNoAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsControllerTest</className>
      <methodName>testInvokeWithNegativeAmount</methodName>
      <methodSignature>testInvokeWithNegativeAmount()</methodSignature>
      <fullMethod>testInvokeWithNegativeAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>DepositsControllerTest</className>
      <methodName>testInvokeAsAnonymous</methodName>
      <methodSignature>testInvokeAsAnonymous()</methodSignature>
      <fullMethod>testInvokeAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>IncomingTransfersControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>IncomingTransfersControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>IncomingTransfersControllerTest</className>
      <methodName>testInvokeAsAnonymous</methodName>
      <methodSignature>testInvokeAsAnonymous()</methodSignature>
      <fullMethod>testInvokeAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>IncomingTransfersControllerTest</className>
      <methodName>testInvokeWithNoAmount</methodName>
      <methodSignature>testInvokeWithNoAmount()</methodSignature>
      <fullMethod>testInvokeWithNoAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>IncomingTransfersControllerTest</className>
      <methodName>testInvokeWithNotANumberAmount</methodName>
      <methodSignature>testInvokeWithNotANumberAmount()</methodSignature>
      <fullMethod>testInvokeWithNotANumberAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>IncomingTransfersControllerTest</className>
      <methodName>testInvokeWith0Amount</methodName>
      <methodSignature>testInvokeWith0Amount()</methodSignature>
      <fullMethod>testInvokeWith0Amount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>IncomingTransfersControllerTest</className>
      <methodName>testInvokeWithNegativeAmount</methodName>
      <methodSignature>testInvokeWithNegativeAmount()</methodSignature>
      <fullMethod>testInvokeWithNegativeAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>IncomingTransfersControllerTest</className>
      <methodName>testInvokeWithoutPayee</methodName>
      <methodSignature>testInvokeWithoutPayee()</methodSignature>
      <fullMethod>testInvokeWithoutPayee()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>IncomingTransfersControllerTest</className>
      <methodName>testInvokeAsAccountNotHolder</methodName>
      <methodSignature>testInvokeAsAccountNotHolder()</methodSignature>
      <fullMethod>testInvokeAsAccountNotHolder()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>IncomingTransfersControllerTest</className>
      <methodName>testInvokeWithPayeeOfOtherOrganization</methodName>
      <methodSignature>testInvokeWithPayeeOfOtherOrganization()</methodSignature>
      <fullMethod>testInvokeWithPayeeOfOtherOrganization()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>IncomingTransfersControllerTest</className>
      <methodName>testInvoke</methodName>
      <methodSignature>testInvoke()</methodSignature>
      <fullMethod>testInvoke()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OrganizationStatementControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OrganizationStatementControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OrganizationStatementControllerTest</className>
      <methodName>testGetListAsAnonymous</methodName>
      <methodSignature>testGetListAsAnonymous()</methodSignature>
      <fullMethod>testGetListAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OrganizationStatementControllerTest</className>
      <methodName>testGetListAsOrganizationNotMember</methodName>
      <methodSignature>testGetListAsOrganizationNotMember()</methodSignature>
      <fullMethod>testGetListAsOrganizationNotMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OrganizationStatementControllerTest</className>
      <methodName>testGetListAsNotHolder</methodName>
      <methodSignature>testGetListAsNotHolder()</methodSignature>
      <fullMethod>testGetListAsNotHolder()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OrganizationStatementControllerTest</className>
      <methodName>testGetList</methodName>
      <methodSignature>testGetList()</methodSignature>
      <fullMethod>testGetList()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OrganizationStatementControllerTest</className>
      <methodName>testGetListWithPagination</methodName>
      <methodSignature>testGetListWithPagination()</methodSignature>
      <fullMethod>testGetListWithPagination()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OutgoingTransfersControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OutgoingTransfersControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OutgoingTransfersControllerTest</className>
      <methodName>testInvokeAsAnonymous</methodName>
      <methodSignature>testInvokeAsAnonymous()</methodSignature>
      <fullMethod>testInvokeAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OutgoingTransfersControllerTest</className>
      <methodName>testInvokeWithNoAmount</methodName>
      <methodSignature>testInvokeWithNoAmount()</methodSignature>
      <fullMethod>testInvokeWithNoAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OutgoingTransfersControllerTest</className>
      <methodName>testInvokeWithNotANumberAmount</methodName>
      <methodSignature>testInvokeWithNotANumberAmount()</methodSignature>
      <fullMethod>testInvokeWithNotANumberAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OutgoingTransfersControllerTest</className>
      <methodName>testInvokeWith0Amount</methodName>
      <methodSignature>testInvokeWith0Amount()</methodSignature>
      <fullMethod>testInvokeWith0Amount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OutgoingTransfersControllerTest</className>
      <methodName>testInvokeWithNegativeAmount</methodName>
      <methodSignature>testInvokeWithNegativeAmount()</methodSignature>
      <fullMethod>testInvokeWithNegativeAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OutgoingTransfersControllerTest</className>
      <methodName>testInvokeWithoutPayee</methodName>
      <methodSignature>testInvokeWithoutPayee()</methodSignature>
      <fullMethod>testInvokeWithoutPayee()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OutgoingTransfersControllerTest</className>
      <methodName>testInvokeAsAccountNotHolder</methodName>
      <methodSignature>testInvokeAsAccountNotHolder()</methodSignature>
      <fullMethod>testInvokeAsAccountNotHolder()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OutgoingTransfersControllerTest</className>
      <methodName>testInvokeWithPayeeOfOtherOrganization</methodName>
      <methodSignature>testInvokeWithPayeeOfOtherOrganization()</methodSignature>
      <fullMethod>testInvokeWithPayeeOfOtherOrganization()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>OutgoingTransfersControllerTest</className>
      <methodName>testInvoke</methodName>
      <methodSignature>testInvoke()</methodSignature>
      <fullMethod>testInvoke()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>PersonalStatementControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>PersonalStatementControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>PersonalStatementControllerTest</className>
      <methodName>testGetListAsAnonymous</methodName>
      <methodSignature>testGetListAsAnonymous()</methodSignature>
      <fullMethod>testGetListAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>PersonalStatementControllerTest</className>
      <methodName>testGetListAsOrganizationNotMember</methodName>
      <methodSignature>testGetListAsOrganizationNotMember()</methodSignature>
      <fullMethod>testGetListAsOrganizationNotMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>PersonalStatementControllerTest</className>
      <methodName>testGetListAsNotHolder</methodName>
      <methodSignature>testGetListAsNotHolder()</methodSignature>
      <fullMethod>testGetListAsNotHolder()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>PersonalStatementControllerTest</className>
      <methodName>testGetList</methodName>
      <methodSignature>testGetList()</methodSignature>
      <fullMethod>testGetList()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>PersonalStatementControllerTest</className>
      <methodName>testGetListWithPagination</methodName>
      <methodSignature>testGetListWithPagination()</methodSignature>
      <fullMethod>testGetListWithPagination()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalControllerTest</className>
      <methodName>testInvoke</methodName>
      <methodSignature>testInvoke()</methodSignature>
      <fullMethod>testInvoke()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalControllerTest</className>
      <methodName>testInvokeWithFloatAmount</methodName>
      <methodSignature>testInvokeWithFloatAmount()</methodSignature>
      <fullMethod>testInvokeWithFloatAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalControllerTest</className>
      <methodName>testInvokeAsNotHolder</methodName>
      <methodSignature>testInvokeAsNotHolder()</methodSignature>
      <fullMethod>testInvokeAsNotHolder()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalControllerTest</className>
      <methodName>testInvokeWith0Amount</methodName>
      <methodSignature>testInvokeWith0Amount()</methodSignature>
      <fullMethod>testInvokeWith0Amount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalControllerTest</className>
      <methodName>testInvokeWithNoAmount</methodName>
      <methodSignature>testInvokeWithNoAmount()</methodSignature>
      <fullMethod>testInvokeWithNoAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalControllerTest</className>
      <methodName>testInvokeWithNegativeAmount</methodName>
      <methodSignature>testInvokeWithNegativeAmount()</methodSignature>
      <fullMethod>testInvokeWithNegativeAmount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Controller</package>
      <className>WithdrawalControllerTest</className>
      <methodName>testInvokeAsAnonymous</methodName>
      <methodSignature>testInvokeAsAnonymous()</methodSignature>
      <fullMethod>testInvokeAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>OrganizationAccountTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting</package>
      <className>OrganizationAccountTest</className>
      <methodName>testCreate</methodName>
      <methodSignature>testCreate()</methodSignature>
      <fullMethod>testCreate()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountServiceTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountServiceTest</className>
      <methodName>testCreatePersonalAccount</methodName>
      <methodSignature>testCreatePersonalAccount()</methodSignature>
      <fullMethod>testCreatePersonalAccount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountServiceTest</className>
      <methodName>testCreateOrganizationAccount</methodName>
      <methodSignature>testCreateOrganizationAccount()</methodSignature>
      <fullMethod>testCreateOrganizationAccount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Accounting\Service</package>
      <className>EventSourcingAccountServiceTest</className>
      <methodName>testDeposit</methodName>
      <methodSignature>testDeposit()</methodSignature>
      <fullMethod>testDeposit()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>Module</className>
      <methodName>onBootstrap</methodName>
      <methodSignature>onBootstrap(MvcEvent $e)</methodSignature>
      <fullMethod>onBootstrap(MvcEvent $e)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>Module</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($serviceLocator)</methodSignature>
      <fullMethod>anonymous function ($serviceLocator)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>Module</className>
      <methodName>getControllerConfig</methodName>
      <methodSignature>getControllerConfig()</methodSignature>
      <fullMethod>getControllerConfig()</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>Module</className>
      <methodName>getControllerPluginConfig</methodName>
      <methodSignature>getControllerPluginConfig()</methodSignature>
      <fullMethod>getControllerPluginConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>Module</className>
      <methodName>getServiceConfig</methodName>
      <methodSignature>getServiceConfig()</methodSignature>
      <fullMethod>getServiceConfig()</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>Module</className>
      <methodName>getConfig</methodName>
      <methodSignature>getConfig()</methodSignature>
      <fullMethod>getConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>Module</className>
      <methodName>getAutoloaderConfig</methodName>
      <methodSignature>getAutoloaderConfig()</methodSignature>
      <fullMethod>getAutoloaderConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>Module</className>
      <methodName>onRenderError</methodName>
      <methodSignature>onRenderError($e)</methodSignature>
      <fullMethod>onRenderError($e)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Application\Assertion</package>
      <className>MemberOfEntityOrganizationAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>InvalidTokenException</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($msg)</methodSignature>
      <fullMethod>__construct($msg)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>LoadLocalProfileListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(UserService $userService, \Google_Client $google)</methodSignature>
      <fullMethod>__construct(UserService $userService, \Google_Client $google)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>LoadLocalProfileListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>LoadLocalProfileListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>LoadLocalProfileListener</className>
      <methodName>loadUserByEmail</methodName>
      <methodSignature>loadUserByEmail(Event $event)</methodSignature>
      <fullMethod>loadUserByEmail(Event $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>LoadLocalProfileListener</className>
      <methodName>loadJWTUser</methodName>
      <methodSignature>loadJWTUser(Event $event)</methodSignature>
      <fullMethod>loadJWTUser(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>LoadLocalProfileListener</className>
      <methodName>loadGoogleJWTUser</methodName>
      <methodSignature>loadGoogleJWTUser(Event $event)</methodSignature>
      <fullMethod>loadGoogleJWTUser(Event $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>LoadLocalProfileListener</className>
      <methodName>getUserService</methodName>
      <methodSignature>getUserService()</methodSignature>
      <fullMethod>getUserService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>OAuth2AdapterResolver</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(ZendOAuth2 $adapter, $providers)</methodSignature>
      <fullMethod>__construct(ZendOAuth2 $adapter, $providers)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>OAuth2AdapterResolver</className>
      <methodName>getAdapter</methodName>
      <methodSignature>getAdapter(AbstractController $controller)</methodSignature>
      <fullMethod>getAdapter(AbstractController $controller)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>OAuth2AdapterResolver</className>
      <methodName>getProviders</methodName>
      <methodSignature>getProviders()</methodSignature>
      <fullMethod>getProviders()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>UserServiceOAuth2AdapterMock</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(UserService $userService)</methodSignature>
      <fullMethod>__construct(UserService $userService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>UserServiceOAuth2AdapterMock</className>
      <methodName>getAdapter</methodName>
      <methodSignature>getAdapter(AbstractController $controller)</methodSignature>
      <fullMethod>getAdapter(AbstractController $controller)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>UserServiceOAuth2AdapterMock</className>
      <methodName>authenticate</methodName>
      <methodSignature>authenticate()</methodSignature>
      <fullMethod>authenticate()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication\OAuth2</package>
      <className>UserServiceOAuth2AdapterMock</className>
      <methodName>getProviders</methodName>
      <methodSignature>getProviders()</methodSignature>
      <fullMethod>getProviders()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>AuthController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(AuthenticationServiceInterface $authService, AdapterResolver $adapterResolver, $privateKey)</methodSignature>
      <fullMethod>__construct(AuthenticationServiceInterface $authService, AdapterResolver $adapterResolver, $privateKey)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>AuthController</className>
      <methodName>loginAction</methodName>
      <methodSignature>loginAction()</methodSignature>
      <fullMethod>loginAction()</fullMethod>
      <crap>4.01</crap>
      <complexity>4</complexity>
      <coverage>92.31</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>AuthController</className>
      <methodName>getAdapterResolver</methodName>
      <methodSignature>getAdapterResolver()</methodSignature>
      <fullMethod>getAdapterResolver()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>AuthController</className>
      <methodName>getAlgorithm</methodName>
      <methodSignature>getAlgorithm()</methodSignature>
      <fullMethod>getAlgorithm()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>AuthController</className>
      <methodName>setAlgorithm</methodName>
      <methodSignature>setAlgorithm($algorithm)</methodSignature>
      <fullMethod>setAlgorithm($algorithm)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>AuthController</className>
      <methodName>getTimeToLive</methodName>
      <methodSignature>getTimeToLive()</methodSignature>
      <fullMethod>getTimeToLive()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>AuthController</className>
      <methodName>setTimeToLive</methodName>
      <methodSignature>setTimeToLive($timeToLive)</methodSignature>
      <fullMethod>setTimeToLive($timeToLive)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>MembershipsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $orgService)</methodSignature>
      <fullMethod>__construct(OrganizationService $orgService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>MembershipsController</className>
      <methodName>getList</methodName>
      <methodSignature>getList()</methodSignature>
      <fullMethod>getList()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>MembershipsController</className>
      <methodName>getOrganizationService</methodName>
      <methodSignature>getOrganizationService()</methodSignature>
      <fullMethod>getOrganizationService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>MembershipsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>MembershipsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>OrganizationAwareController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $organizationService)</methodSignature>
      <fullMethod>__construct(OrganizationService $organizationService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>OrganizationAwareController</className>
      <methodName>setEventManager</methodName>
      <methodSignature>setEventManager(EventManagerInterface $events)</methodSignature>
      <fullMethod>setEventManager(EventManagerInterface $events)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>OrganizationAwareController</className>
      <methodName>getOrganizationService</methodName>
      <methodSignature>getOrganizationService()</methodSignature>
      <fullMethod>getOrganizationService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>OrganizationAwareController</className>
      <methodName>loadOrganization</methodName>
      <methodSignature>loadOrganization(MvcEvent $e)</methodSignature>
      <fullMethod>loadOrganization(MvcEvent $e)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>OrganizationAwareController</className>
      <methodName>getDateTimeParam</methodName>
      <methodSignature>getDateTimeParam($value)</methodSignature>
      <fullMethod>getDateTimeParam($value)</fullMethod>
      <crap>4.77</crap>
      <complexity>4</complexity>
      <coverage>63.64</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>DomainEntity</className>
      <methodName>getUuid</methodName>
      <methodSignature>getUuid()</methodSignature>
      <fullMethod>getUuid()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>DomainEntity</className>
      <methodName>getId</methodName>
      <methodSignature>getId()</methodSignature>
      <fullMethod>getId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>DomainEntity</className>
      <methodName>__toString</methodName>
      <methodSignature>__toString()</methodSignature>
      <fullMethod>__toString()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>DomainEntity</className>
      <methodName>equals</methodName>
      <methodSignature>equals(DomainEntity $object = null)</methodSignature>
      <fullMethod>equals(DomainEntity $object = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>DomainEntity</className>
      <methodName>aggregateId</methodName>
      <methodSignature>aggregateId()</methodSignature>
      <fullMethod>aggregateId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>DomainEntityUnavailableException</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(DomainEntity $container, $content)</methodSignature>
      <fullMethod>__construct(DomainEntity $container, $content)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application</package>
      <className>DuplicatedDomainEntityException</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(DomainEntity $container, $content)</methodSignature>
      <fullMethod>__construct(DomainEntity $container, $content)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>BasicUser</className>
      <methodName>createBasicUser</methodName>
      <methodSignature>createBasicUser($id)</methodSignature>
      <fullMethod>createBasicUser($id)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>BasicUser</className>
      <methodName>getId</methodName>
      <methodSignature>getId()</methodSignature>
      <fullMethod>getId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>BasicUser</className>
      <methodName>setFirstname</methodName>
      <methodSignature>setFirstname($firstname)</methodSignature>
      <fullMethod>setFirstname($firstname)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>BasicUser</className>
      <methodName>getFirstname</methodName>
      <methodSignature>getFirstname()</methodSignature>
      <fullMethod>getFirstname()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>BasicUser</className>
      <methodName>setLastname</methodName>
      <methodSignature>setLastname($lastname)</methodSignature>
      <fullMethod>setLastname($lastname)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>BasicUser</className>
      <methodName>getLastname</methodName>
      <methodSignature>getLastname()</methodSignature>
      <fullMethod>getLastname()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>DomainEntity</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($id)</methodSignature>
      <fullMethod>__construct($id)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>DomainEntity</className>
      <methodName>getId</methodName>
      <methodSignature>getId()</methodSignature>
      <fullMethod>getId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>DomainEntity</className>
      <methodName>getCreatedAt</methodName>
      <methodSignature>getCreatedAt()</methodSignature>
      <fullMethod>getCreatedAt()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>DomainEntity</className>
      <methodName>setCreatedAt</methodName>
      <methodSignature>setCreatedAt(\DateTime $when)</methodSignature>
      <fullMethod>setCreatedAt(\DateTime $when)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>DomainEntity</className>
      <methodName>getCreatedBy</methodName>
      <methodSignature>getCreatedBy()</methodSignature>
      <fullMethod>getCreatedBy()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>DomainEntity</className>
      <methodName>setCreatedBy</methodName>
      <methodSignature>setCreatedBy(BasicUser $user)</methodSignature>
      <fullMethod>setCreatedBy(BasicUser $user)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>DomainEntity</className>
      <methodName>equals</methodName>
      <methodSignature>equals(DomainEntity $object = null)</methodSignature>
      <fullMethod>equals(DomainEntity $object = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>EditableEntity</className>
      <methodName>getMostRecentEditAt</methodName>
      <methodSignature>getMostRecentEditAt()</methodSignature>
      <fullMethod>getMostRecentEditAt()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>EditableEntity</className>
      <methodName>setMostRecentEditAt</methodName>
      <methodSignature>setMostRecentEditAt(\DateTime $when)</methodSignature>
      <fullMethod>setMostRecentEditAt(\DateTime $when)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>EditableEntity</className>
      <methodName>getMostRecentEditBy</methodName>
      <methodSignature>getMostRecentEditBy()</methodSignature>
      <fullMethod>getMostRecentEditBy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>EditableEntity</className>
      <methodName>setMostRecentEditBy</methodName>
      <methodSignature>setMostRecentEditBy(BasicUser $user)</methodSignature>
      <fullMethod>setMostRecentEditBy(BasicUser $user)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>create</methodName>
      <methodSignature>create(User $createdBy = null)</methodSignature>
      <fullMethod>create(User $createdBy = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getCreatedAt</methodName>
      <methodSignature>getCreatedAt()</methodSignature>
      <fullMethod>getCreatedAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>setCreatedAt</methodName>
      <methodSignature>setCreatedAt(\DateTime $when)</methodSignature>
      <fullMethod>setCreatedAt(\DateTime $when)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getCreatedBy</methodName>
      <methodSignature>getCreatedBy()</methodSignature>
      <fullMethod>getCreatedBy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>setCreatedBy</methodName>
      <methodSignature>setCreatedBy(BasicUser $user)</methodSignature>
      <fullMethod>setCreatedBy(BasicUser $user)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getMostRecentEditAt</methodName>
      <methodSignature>getMostRecentEditAt()</methodSignature>
      <fullMethod>getMostRecentEditAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>setMostRecentEditAt</methodName>
      <methodSignature>setMostRecentEditAt(\DateTime $when)</methodSignature>
      <fullMethod>setMostRecentEditAt(\DateTime $when)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getMostRecentEditBy</methodName>
      <methodSignature>getMostRecentEditBy()</methodSignature>
      <fullMethod>getMostRecentEditBy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>setMostRecentEditBy</methodName>
      <methodSignature>setMostRecentEditBy(BasicUser $user)</methodSignature>
      <fullMethod>setMostRecentEditBy(BasicUser $user)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>equals</methodName>
      <methodSignature>equals(User $object = null)</methodSignature>
      <fullMethod>equals(User $object = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>setEmail</methodName>
      <methodSignature>setEmail($email)</methodSignature>
      <fullMethod>setEmail($email)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getEmail</methodName>
      <methodSignature>getEmail()</methodSignature>
      <fullMethod>getEmail()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>setStatus</methodName>
      <methodSignature>setStatus($status)</methodSignature>
      <fullMethod>setStatus($status)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getStatus</methodName>
      <methodSignature>getStatus()</methodSignature>
      <fullMethod>getStatus()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getOrganizationMemberships</methodName>
      <methodSignature>getOrganizationMemberships()</methodSignature>
      <fullMethod>getOrganizationMemberships()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>addMembership</methodName>
      <methodSignature>addMembership($organization, $role = OrganizationMembership::ROLE_CONTRIBUTOR)</methodSignature>
      <fullMethod>addMembership($organization, $role = OrganizationMembership::ROLE_CONTRIBUTOR)</fullMethod>
      <crap>3.01</crap>
      <complexity>3</complexity>
      <coverage>90.91</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>removeMembership</methodName>
      <methodSignature>removeMembership($organization)</methodSignature>
      <fullMethod>removeMembership($organization)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>setPicture</methodName>
      <methodSignature>setPicture($url)</methodSignature>
      <fullMethod>setPicture($url)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getPicture</methodName>
      <methodSignature>getPicture()</methodSignature>
      <fullMethod>getPicture()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>isMemberOf</methodName>
      <methodSignature>isMemberOf($organization)</methodSignature>
      <fullMethod>isMemberOf($organization)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>isContributorOf</methodName>
      <methodSignature>isContributorOf($organization)</methodSignature>
      <fullMethod>isContributorOf($organization)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>isRoleMemberOf</methodName>
      <methodSignature>isRoleMemberOf($organization)</methodSignature>
      <fullMethod>isRoleMemberOf($organization)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>isOwnerOf</methodName>
      <methodSignature>isOwnerOf($organization)</methodSignature>
      <fullMethod>isOwnerOf($organization)</fullMethod>
      <crap>4.03</crap>
      <complexity>4</complexity>
      <coverage>87.5</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getMembership</methodName>
      <methodSignature>getMembership($organization)</methodSignature>
      <fullMethod>getMembership($organization)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>setRole</methodName>
      <methodSignature>setRole($role)</methodSignature>
      <fullMethod>setRole($role)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getRole</methodName>
      <methodSignature>getRole()</methodSignature>
      <fullMethod>getRole()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getRoleId</methodName>
      <methodSignature>getRoleId()</methodSignature>
      <fullMethod>getRoleId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>setKanbanizeUsername</methodName>
      <methodSignature>setKanbanizeUsername($username)</methodSignature>
      <fullMethod>setKanbanizeUsername($username)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getKanbanizeUsername</methodName>
      <methodSignature>getKanbanizeUsername()</methodSignature>
      <fullMethod>getKanbanizeUsername()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getFlowCards</methodName>
      <methodSignature>getFlowCards()</methodSignature>
      <fullMethod>getFlowCards()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>addFlowCard</methodName>
      <methodSignature>addFlowCard(FlowCard $card)</methodSignature>
      <fullMethod>addFlowCard(FlowCard $card)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Entity</package>
      <className>User</className>
      <methodName>getResourceId</methodName>
      <methodSignature>getResourceId()</methodSignature>
      <fullMethod>getResourceId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>AclFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>DomainEventDispatcher</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>DomainEventDispatcher</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function(PostCommitEvent $event) use ($that, $events)</methodSignature>
      <fullMethod>anonymous function(PostCommitEvent $event) use ($that, $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>DomainEventDispatcher</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>EventSourcingUserService</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(EntityManager $entityManager)</methodSignature>
      <fullMethod>__construct(EntityManager $entityManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>EventSourcingUserService</className>
      <methodName>subscribeUser</methodName>
      <methodSignature>subscribeUser($userInfo)</methodSignature>
      <fullMethod>subscribeUser($userInfo)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>EventSourcingUserService</className>
      <methodName>create</methodName>
      <methodSignature>create($userInfo, $role, User $createdBy = null)</methodSignature>
      <fullMethod>create($userInfo, $role, User $createdBy = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>EventSourcingUserService</className>
      <methodName>findUser</methodName>
      <methodSignature>findUser($id)</methodSignature>
      <fullMethod>findUser($id)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>EventSourcingUserService</className>
      <methodName>findUserByEmail</methodName>
      <methodSignature>findUserByEmail($email)</methodSignature>
      <fullMethod>findUserByEmail($email)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>EventSourcingUserService</className>
      <methodName>findUsers</methodName>
      <methodSignature>findUsers($filters)</methodSignature>
      <fullMethod>findUsers($filters)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>EventSourcingUserService</className>
      <methodName>setEventManager</methodName>
      <methodSignature>setEventManager(EventManagerInterface $events)</methodSignature>
      <fullMethod>setEventManager(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>EventSourcingUserService</className>
      <methodName>getEventManager</methodName>
      <methodSignature>getEventManager()</methodSignature>
      <fullMethod>getEventManager()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>OAuth2AdapterResolverFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>OAuth2AdapterResolverFactory</className>
      <methodName>loadProviders</methodName>
      <methodSignature>loadProviders($config, ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>loadProviders($config, ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>ReadModelProjector</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(EntityManager $entityManager)</methodSignature>
      <fullMethod>__construct(EntityManager $entityManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>ReadModelProjector</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>ReadModelProjector</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function(PostCommitEvent $event) use ($that)</methodSignature>
      <fullMethod>anonymous function(PostCommitEvent $event) use ($that)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>ReadModelProjector</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>ReadModelProjector</className>
      <methodName>getHandler</methodName>
      <methodSignature>getHandler(StreamEvent $event)</methodSignature>
      <fullMethod>getHandler(StreamEvent $event)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Service</package>
      <className>ReadModelProjector</className>
      <methodName>getPackage</methodName>
      <methodSignature>getPackage()</methodSignature>
      <fullMethod>getPackage()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\View</package>
      <className>ErrorJsonModel</className>
      <methodName>setCode</methodName>
      <methodSignature>setCode($code)</methodSignature>
      <fullMethod>setCode($code)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\View</package>
      <className>ErrorJsonModel</className>
      <methodName>addSecondaryErrors</methodName>
      <methodSignature>addSecondaryErrors($field, $messages)</methodSignature>
      <fullMethod>addSecondaryErrors($field, $messages)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\View</package>
      <className>ErrorJsonModel</className>
      <methodName>setDescription</methodName>
      <methodSignature>setDescription($description)</methodSignature>
      <fullMethod>setDescription($description)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\View</package>
      <className>ErrorJsonModel</className>
      <methodName>hasErrors</methodName>
      <methodSignature>hasErrors()</methodSignature>
      <fullMethod>hasErrors()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\View</package>
      <className>ErrorJsonModel</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\View</package>
      <className>OrganizationMembershipJsonModel</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(Url $url, User $user)</methodSignature>
      <fullMethod>__construct(Url $url, User $user)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\View</package>
      <className>OrganizationMembershipJsonModel</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>93.75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\View</package>
      <className>OrganizationMembershipJsonModel</className>
      <methodName>serializeOne</methodName>
      <methodSignature>serializeOne(OrganizationMembership $membership)</methodSignature>
      <fullMethod>serializeOne(OrganizationMembership $membership)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\View</package>
      <className>OrganizationMembershipJsonModel</className>
      <methodName>serializeOrganization</methodName>
      <methodSignature>serializeOrganization(Organization $org)</methodSignature>
      <fullMethod>serializeOrganization(Organization $org)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>AuthControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>AuthControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>AuthControllerTest</className>
      <methodName>testLogin</methodName>
      <methodSignature>testLogin()</methodSignature>
      <fullMethod>testLogin()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>AuthControllerTest</className>
      <methodName>testLoginWithInvalidProvider</methodName>
      <methodSignature>testLoginWithInvalidProvider()</methodSignature>
      <fullMethod>testLoginWithInvalidProvider()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>AuthControllerTest</className>
      <methodName>testLoginWithInvalidToken</methodName>
      <methodSignature>testLoginWithInvalidToken()</methodSignature>
      <fullMethod>testLoginWithInvalidToken()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>MembershipsControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>MembershipsControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>MembershipsControllerTest</className>
      <methodName>testGetListAsAnonymous</methodName>
      <methodSignature>testGetListAsAnonymous()</methodSignature>
      <fullMethod>testGetListAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>MembershipsControllerTest</className>
      <methodName>testGetEmptyList</methodName>
      <methodSignature>testGetEmptyList()</methodSignature>
      <fullMethod>testGetEmptyList()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>MembershipsControllerTest</className>
      <methodName>testGetList</methodName>
      <methodSignature>testGetList()</methodSignature>
      <fullMethod>testGetList()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Controller</package>
      <className>MembershipsControllerTest</className>
      <methodName>testGetListAsNotMemberOfAnyOrg</methodName>
      <methodSignature>testGetListAsNotMemberOfAnyOrg()</methodSignature>
      <fullMethod>testGetListAsNotMemberOfAnyOrg()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>Module</className>
      <methodName>getControllerConfig</methodName>
      <methodSignature>getControllerConfig()</methodSignature>
      <fullMethod>getControllerConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>Module</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($locator)</methodSignature>
      <fullMethod>anonymous function ($locator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>Module</className>
      <methodName>getServiceConfig</methodName>
      <methodSignature>getServiceConfig()</methodSignature>
      <fullMethod>getServiceConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>Module</className>
      <methodName>getConfig</methodName>
      <methodSignature>getConfig()</methodSignature>
      <fullMethod>getConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>Module</className>
      <methodName>getAutoloaderConfig</methodName>
      <methodSignature>getAutoloaderConfig()</methodSignature>
      <fullMethod>getAutoloaderConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(FlowService $flowService)</methodSignature>
      <fullMethod>__construct(FlowService $flowService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardsController</className>
      <methodName>getList</methodName>
      <methodSignature>getList()</methodSignature>
      <fullMethod>getList()</fullMethod>
      <crap>6.03</crap>
      <complexity>6</complexity>
      <coverage>90.48</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardsController</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function($flowCard)</methodSignature>
      <fullMethod>anonymous function($flowCard)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardsController</className>
      <methodName>getFlowService</methodName>
      <methodSignature>getFlowService()</methodSignature>
      <fullMethod>getFlowService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardsController</className>
      <methodName>setListLimit</methodName>
      <methodSignature>setListLimit($size)</methodSignature>
      <fullMethod>setListLimit($size)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardsController</className>
      <methodName>getListLimit</methodName>
      <methodSignature>getListLimit()</methodSignature>
      <fullMethod>getListLimit()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($id, User $user)</methodSignature>
      <fullMethod>__construct($id, User $user)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>getRecipient</methodName>
      <methodSignature>getRecipient()</methodSignature>
      <fullMethod>getRecipient()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>getMostRecentEditAt</methodName>
      <methodSignature>getMostRecentEditAt()</methodSignature>
      <fullMethod>getMostRecentEditAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>setMostRecentEditAt</methodName>
      <methodSignature>setMostRecentEditAt(\DateTime $when)</methodSignature>
      <fullMethod>setMostRecentEditAt(\DateTime $when)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>getMostRecentEditBy</methodName>
      <methodSignature>getMostRecentEditBy()</methodSignature>
      <fullMethod>getMostRecentEditBy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>setMostRecentEditBy</methodName>
      <methodSignature>setMostRecentEditBy(User $user)</methodSignature>
      <fullMethod>setMostRecentEditBy(User $user)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>setContent</methodName>
      <methodSignature>setContent($contentKey, $contentValue)</methodSignature>
      <fullMethod>setContent($contentKey, $contentValue)</fullMethod>
      <crap>3.03</crap>
      <complexity>3</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>getContent</methodName>
      <methodSignature>getContent()</methodSignature>
      <fullMethod>getContent()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>setItem</methodName>
      <methodSignature>setItem(Task $item)</methodSignature>
      <fullMethod>setItem(Task $item)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>getItem</methodName>
      <methodSignature>getItem()</methodSignature>
      <fullMethod>getItem()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>hide</methodName>
      <methodSignature>hide()</methodSignature>
      <fullMethod>hide()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>show</methodName>
      <methodSignature>show()</methodSignature>
      <fullMethod>show()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>FlowCard</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>ItemMemberRemovedCard</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>ItemOwnerChangedCard</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>OrganizationMemberRoleChangedCard</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>VoteCompletedItemCard</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>VoteCompletedItemReopenedCard</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>VoteCompletedItemVotingClosedCard</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Entity</package>
      <className>VoteIdeaCard</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>FlowCard</className>
      <methodName>create</methodName>
      <methodSignature>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</methodSignature>
      <fullMethod>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>FlowCard</className>
      <methodName>whenFlowCardCreated</methodName>
      <methodSignature>whenFlowCardCreated(FlowCardCreated $event)</methodSignature>
      <fullMethod>whenFlowCardCreated(FlowCardCreated $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>FlowCard</className>
      <methodName>hide</methodName>
      <methodSignature>hide()</methodSignature>
      <fullMethod>hide()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>FlowCard</className>
      <methodName>whenFlowCardHidden</methodName>
      <methodSignature>whenFlowCardHidden(FlowCardHidden $event)</methodSignature>
      <fullMethod>whenFlowCardHidden(FlowCardHidden $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>FlowCard</className>
      <methodName>getRecipient</methodName>
      <methodSignature>getRecipient()</methodSignature>
      <fullMethod>getRecipient()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>FlowCard</className>
      <methodName>getMostRecentEditAt</methodName>
      <methodSignature>getMostRecentEditAt()</methodSignature>
      <fullMethod>getMostRecentEditAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>FlowCard</className>
      <methodName>getMostRecentEditBy</methodName>
      <methodSignature>getMostRecentEditBy()</methodSignature>
      <fullMethod>getMostRecentEditBy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>FlowCard</className>
      <methodName>getContent</methodName>
      <methodSignature>getContent()</methodSignature>
      <fullMethod>getContent()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>FlowCard</className>
      <methodName>getItemId</methodName>
      <methodSignature>getItemId()</methodSignature>
      <fullMethod>getItemId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>FlowCard</className>
      <methodName>getHidden</methodName>
      <methodSignature>getHidden()</methodSignature>
      <fullMethod>getHidden()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>ItemMemberRemovedCard</className>
      <methodName>create</methodName>
      <methodSignature>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</methodSignature>
      <fullMethod>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>ItemMemberRemovedCard</className>
      <methodName>whenFlowCardCreated</methodName>
      <methodSignature>whenFlowCardCreated(FlowCardCreated $event)</methodSignature>
      <fullMethod>whenFlowCardCreated(FlowCardCreated $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>ItemOwnerChangedCard</className>
      <methodName>create</methodName>
      <methodSignature>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</methodSignature>
      <fullMethod>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>ItemOwnerChangedCard</className>
      <methodName>whenFlowCardCreated</methodName>
      <methodSignature>whenFlowCardCreated(FlowCardCreated $event)</methodSignature>
      <fullMethod>whenFlowCardCreated(FlowCardCreated $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>OrganizationMemberRoleChangedCard</className>
      <methodName>create</methodName>
      <methodSignature>create(BasicUser $recipient, $content, BasicUser $by, $item = null)</methodSignature>
      <fullMethod>create(BasicUser $recipient, $content, BasicUser $by, $item = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>OrganizationMemberRoleChangedCard</className>
      <methodName>whenFlowCardCreated</methodName>
      <methodSignature>whenFlowCardCreated(FlowCardCreated $event)</methodSignature>
      <fullMethod>whenFlowCardCreated(FlowCardCreated $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>CardCommandsListener</className>
      <methodName>onFlowCardCreated</methodName>
      <methodSignature>onFlowCardCreated(StreamEvent $event)</methodSignature>
      <fullMethod>onFlowCardCreated(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>CardCommandsListener</className>
      <methodName>onFlowCardHidden</methodName>
      <methodSignature>onFlowCardHidden(StreamEvent $event)</methodSignature>
      <fullMethod>onFlowCardHidden(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>CardCommandsListener</className>
      <methodName>cardFactory</methodName>
      <methodSignature>cardFactory(User $recipient, StreamEvent $event)</methodSignature>
      <fullMethod>cardFactory(User $recipient, StreamEvent $event)</fullMethod>
      <crap>210</crap>
      <complexity>14</complexity>
      <coverage>0</coverage>
      <crapLoad>14</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>CardCommandsListener</className>
      <methodName>getPackage</methodName>
      <methodSignature>getPackage()</methodSignature>
      <fullMethod>getPackage()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>EventSourcingFlowService</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(EventStore $eventStore, EntityManager $entityManager)</methodSignature>
      <fullMethod>__construct(EventStore $eventStore, EntityManager $entityManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>EventSourcingFlowService</className>
      <methodName>getCard</methodName>
      <methodSignature>getCard($id)</methodSignature>
      <fullMethod>getCard($id)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>EventSourcingFlowService</className>
      <methodName>findFlowCards</methodName>
      <methodSignature>findFlowCards(User $recipient, $offset, $limit, $filters = [])</methodSignature>
      <fullMethod>findFlowCards(User $recipient, $offset, $limit, $filters = [])</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>EventSourcingFlowService</className>
      <methodName>createVoteIdeaCard</methodName>
      <methodSignature>createVoteIdeaCard(BasicUser $recipient, $itemId, $organizationid, BasicUser $createdBy)</methodSignature>
      <fullMethod>createVoteIdeaCard(BasicUser $recipient, $itemId, $organizationid, BasicUser $createdBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>EventSourcingFlowService</className>
      <methodName>createVoteCompletedItemCard</methodName>
      <methodSignature>createVoteCompletedItemCard(BasicUser $recipient, $itemId, $organizationid, BasicUser $createdBy)</methodSignature>
      <fullMethod>createVoteCompletedItemCard(BasicUser $recipient, $itemId, $organizationid, BasicUser $createdBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>EventSourcingFlowService</className>
      <methodName>createVoteCompletedItemVotingClosedCard</methodName>
      <methodSignature>createVoteCompletedItemVotingClosedCard(BasicUser $recipient, $itemId, $organizationid, BasicUser $createdBy)</methodSignature>
      <fullMethod>createVoteCompletedItemVotingClosedCard(BasicUser $recipient, $itemId, $organizationid, BasicUser $createdBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>EventSourcingFlowService</className>
      <methodName>createVoteCompletedItemReopenedCard</methodName>
      <methodSignature>createVoteCompletedItemReopenedCard(BasicUser $recipient, $itemId, $organizationid, BasicUser $createdBy)</methodSignature>
      <fullMethod>createVoteCompletedItemReopenedCard(BasicUser $recipient, $itemId, $organizationid, BasicUser $createdBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>EventSourcingFlowService</className>
      <methodName>createItemOwnerChangedCard</methodName>
      <methodSignature>createItemOwnerChangedCard(BasicUser $recipient, $itemId, $organizationid, BasicUser $createdBy)</methodSignature>
      <fullMethod>createItemOwnerChangedCard(BasicUser $recipient, $itemId, $organizationid, BasicUser $createdBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>EventSourcingFlowService</className>
      <methodName>createItemMemberRemovedCard</methodName>
      <methodSignature>createItemMemberRemovedCard(BasicUser $recipient, $itemId, BasicUser $exMember, $organizationid, BasicUser $createdBy)</methodSignature>
      <fullMethod>createItemMemberRemovedCard(BasicUser $recipient, $itemId, BasicUser $exMember, $organizationid, BasicUser $createdBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>EventSourcingFlowService</className>
      <methodName>createOrganizationMemberRoleChangedCard</methodName>
      <methodSignature>createOrganizationMemberRoleChangedCard(BasicUser $recipient, BasicUser $member, $organizationid, $oldRole, $newRole, BasicUser $createdBy)</methodSignature>
      <fullMethod>createOrganizationMemberRoleChangedCard(BasicUser $recipient, BasicUser $member, $organizationid, $oldRole, $newRole, BasicUser $createdBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>EventSourcingFlowService</className>
      <methodName>countCards</methodName>
      <methodSignature>countCards(BasicUser $recipient, $filters)</methodSignature>
      <fullMethod>countCards(BasicUser $recipient, $filters)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>EventSourcingFlowService</className>
      <methodName>findFlowCardsByItem</methodName>
      <methodSignature>findFlowCardsByItem(Task $item)</methodSignature>
      <fullMethod>findFlowCardsByItem(Task $item)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>ItemCommandsListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(FlowService $flowService, 
			OrganizationService $organizationService, 
			UserService $userService, 
			EventStore $transactionManager,
			TaskService $taskService)</methodSignature>
      <fullMethod>__construct(FlowService $flowService, 
			OrganizationService $organizationService, 
			UserService $userService, 
			EventStore $transactionManager,
			TaskService $taskService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>ItemCommandsListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>ItemCommandsListener</className>
      <methodName>processItemCreated</methodName>
      <methodSignature>processItemCreated(Event $event)</methodSignature>
      <fullMethod>processItemCreated(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>ItemCommandsListener</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function($recipient) use($params)</methodSignature>
      <fullMethod>anonymous function($recipient) use($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>ItemCommandsListener</className>
      <methodName>processItemOngoing</methodName>
      <methodSignature>processItemOngoing(Event $event)</methodSignature>
      <fullMethod>processItemOngoing(Event $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>ItemCommandsListener</className>
      <methodName>processItemCompleted</methodName>
      <methodSignature>processItemCompleted(Event $event)</methodSignature>
      <fullMethod>processItemCompleted(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>ItemCommandsListener</className>
      <methodName>processIdeaVotingClosed</methodName>
      <methodSignature>processIdeaVotingClosed(Event $event)</methodSignature>
      <fullMethod>processIdeaVotingClosed(Event $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>ItemCommandsListener</className>
      <methodName>processItemCompletedVotingClosed</methodName>
      <methodSignature>processItemCompletedVotingClosed(Event $event)</methodSignature>
      <fullMethod>processItemCompletedVotingClosed(Event $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>ItemCommandsListener</className>
      <methodName>processItemCompletedReopened</methodName>
      <methodSignature>processItemCompletedReopened(Event $event)</methodSignature>
      <fullMethod>processItemCompletedReopened(Event $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>ItemCommandsListener</className>
      <methodName>processItemOwnerChanged</methodName>
      <methodSignature>processItemOwnerChanged(Event $event)</methodSignature>
      <fullMethod>processItemOwnerChanged(Event $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>ItemCommandsListener</className>
      <methodName>processItemMemberRemoved</methodName>
      <methodSignature>processItemMemberRemoved(Event $event)</methodSignature>
      <fullMethod>processItemMemberRemoved(Event $event)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>ItemCommandsListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>OrganizationCommandsListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(FlowService $flowService, 
			OrganizationService $organizationService, 
			UserService $userService, 
			EventStore $transactionManager,
			TaskService $taskService)</methodSignature>
      <fullMethod>__construct(FlowService $flowService, 
			OrganizationService $organizationService, 
			UserService $userService, 
			EventStore $transactionManager,
			TaskService $taskService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>OrganizationCommandsListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>OrganizationCommandsListener</className>
      <methodName>processOrganizationMemberRoleChange</methodName>
      <methodSignature>processOrganizationMemberRoleChange(Event $event)</methodSignature>
      <fullMethod>processOrganizationMemberRoleChange(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>OrganizationCommandsListener</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function($member) use($params)</methodSignature>
      <fullMethod>anonymous function($member) use($params)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Service</package>
      <className>OrganizationCommandsListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>VoteCompletedItemCard</className>
      <methodName>create</methodName>
      <methodSignature>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</methodSignature>
      <fullMethod>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>VoteCompletedItemCard</className>
      <methodName>whenFlowCardCreated</methodName>
      <methodSignature>whenFlowCardCreated(FlowCardCreated $event)</methodSignature>
      <fullMethod>whenFlowCardCreated(FlowCardCreated $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>VoteCompletedItemReopenedCard</className>
      <methodName>create</methodName>
      <methodSignature>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</methodSignature>
      <fullMethod>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>VoteCompletedItemReopenedCard</className>
      <methodName>whenFlowCardCreated</methodName>
      <methodSignature>whenFlowCardCreated(FlowCardCreated $event)</methodSignature>
      <fullMethod>whenFlowCardCreated(FlowCardCreated $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>VoteCompletedItemVotingClosedCard</className>
      <methodName>create</methodName>
      <methodSignature>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</methodSignature>
      <fullMethod>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>VoteCompletedItemVotingClosedCard</className>
      <methodName>whenFlowCardCreated</methodName>
      <methodSignature>whenFlowCardCreated(FlowCardCreated $event)</methodSignature>
      <fullMethod>whenFlowCardCreated(FlowCardCreated $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>VoteIdeaCard</className>
      <methodName>create</methodName>
      <methodSignature>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</methodSignature>
      <fullMethod>create(BasicUser $recipient, $content, BasicUser $by, $itemId = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>VoteIdeaCard</className>
      <methodName>whenFlowCardCreated</methodName>
      <methodSignature>whenFlowCardCreated(FlowCardCreated $event)</methodSignature>
      <fullMethod>whenFlowCardCreated(FlowCardCreated $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>CreateVoteCompletedItemCardTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>CreateVoteCompletedItemCardTest</className>
      <methodName>testCreateCompletedItemVoteCard</methodName>
      <methodSignature>testCreateCompletedItemVoteCard()</methodSignature>
      <fullMethod>testCreateCompletedItemVoteCard()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>CreateVoteIdeaCardTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement</package>
      <className>CreateVoteIdeaCardTest</className>
      <methodName>testCreateIdeaVoteCard</methodName>
      <methodSignature>testCreateIdeaVoteCard()</methodSignature>
      <fullMethod>testCreateIdeaVoteCard()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardControllerTest</className>
      <methodName>setupMore</methodName>
      <methodSignature>setupMore()</methodSignature>
      <fullMethod>setupMore()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardControllerTest</className>
      <methodName>testGetEmptyListFromFlow</methodName>
      <methodSignature>testGetEmptyListFromFlow()</methodSignature>
      <fullMethod>testGetEmptyListFromFlow()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardControllerTest</className>
      <methodName>testGetListFromFlow</methodName>
      <methodSignature>testGetListFromFlow()</methodSignature>
      <fullMethod>testGetListFromFlow()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>FlowManagement\Controller</package>
      <className>CardControllerTest</className>
      <methodName>testGetListFromFlowAsAnonymous</methodName>
      <methodSignature>testGetListFromFlowAsAnonymous()</methodSignature>
      <fullMethod>testGetListFromFlowAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>Module</className>
      <methodName>getControllerConfig</methodName>
      <methodSignature>getControllerConfig()</methodSignature>
      <fullMethod>getControllerConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>Module</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($locator)</methodSignature>
      <fullMethod>anonymous function ($locator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>Module</className>
      <methodName>getServiceConfig</methodName>
      <methodSignature>getServiceConfig()</methodSignature>
      <fullMethod>getServiceConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>Module</className>
      <methodName>getConfig</methodName>
      <methodSignature>getConfig()</methodSignature>
      <fullMethod>getConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>Module</className>
      <methodName>getAutoloaderConfig</methodName>
      <methodSignature>getAutoloaderConfig()</methodSignature>
      <fullMethod>getAutoloaderConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>BoardsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $organizationService, StreamService $streamService, KanbanizeAPI $client, KanbanizeService $kanbanizeService)</methodSignature>
      <fullMethod>__construct(OrganizationService $organizationService, StreamService $streamService, KanbanizeAPI $client, KanbanizeService $kanbanizeService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>BoardsController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>210</crap>
      <complexity>14</complexity>
      <coverage>0</coverage>
      <crapLoad>14</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>BoardsController</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function()</methodSignature>
      <fullMethod>anonymous function()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>BoardsController</className>
      <methodName>get</methodName>
      <methodSignature>get($id)</methodSignature>
      <fullMethod>get($id)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>BoardsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>BoardsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>BoardsController</className>
      <methodName>initApi</methodName>
      <methodSignature>initApi($apiKey, $subdomain)</methodSignature>
      <fullMethod>initApi($apiKey, $subdomain)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>BoardsController</className>
      <methodName>createStream</methodName>
      <methodSignature>createStream($subject, $projectId, $boardId, Organization $organization)</methodSignature>
      <fullMethod>createStream($subject, $projectId, $boardId, Organization $organization)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $orgService, 
			KanbanizeAPI $client, 
			KanbanizeService $kanbanizeService, 
			TaskService $taskService, 
			UserService $userService,
			StreamService $streamService)</methodSignature>
      <fullMethod>__construct(OrganizationService $orgService, 
			KanbanizeAPI $client, 
			KanbanizeService $kanbanizeService, 
			TaskService $taskService, 
			UserService $userService,
			StreamService $streamService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>create</methodName>
      <methodSignature>create($data)</methodSignature>
      <fullMethod>create($data)</fullMethod>
      <crap>5.11</crap>
      <complexity>5</complexity>
      <coverage>83.78</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>getKanbanizeImporter</methodName>
      <methodSignature>getKanbanizeImporter()</methodSignature>
      <fullMethod>getKanbanizeImporter()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>getNotificationService</methodName>
      <methodSignature>getNotificationService()</methodSignature>
      <fullMethod>getNotificationService()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>initApi</methodName>
      <methodSignature>initApi($apiKey, $subdomain)</methodSignature>
      <fullMethod>initApi($apiKey, $subdomain)</fullMethod>
      <crap>3.21</crap>
      <complexity>3</complexity>
      <coverage>71.43</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>setIntervalForAssignShares</methodName>
      <methodSignature>setIntervalForAssignShares(\DateInterval $interval)</methodSignature>
      <fullMethod>setIntervalForAssignShares(\DateInterval $interval)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>getIntervalForAssignShares</methodName>
      <methodSignature>getIntervalForAssignShares()</methodSignature>
      <fullMethod>getIntervalForAssignShares()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>getStreamService</methodName>
      <methodSignature>getStreamService()</methodSignature>
      <fullMethod>getStreamService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>getKanbanizeService</methodName>
      <methodSignature>getKanbanizeService()</methodSignature>
      <fullMethod>getKanbanizeService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>getKanbanizeClient</methodName>
      <methodSignature>getKanbanizeClient()</methodSignature>
      <fullMethod>getKanbanizeClient()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportsController</className>
      <methodName>getTaskService</methodName>
      <methodSignature>getTaskService()</methodSignature>
      <fullMethod>getTaskService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>OrgSettingsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $orgService)</methodSignature>
      <fullMethod>__construct(OrganizationService $orgService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>OrgSettingsController</className>
      <methodName>getList</methodName>
      <methodSignature>getList()</methodSignature>
      <fullMethod>getList()</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>OrgSettingsController</className>
      <methodName>replaceList</methodName>
      <methodSignature>replaceList($data)</methodSignature>
      <fullMethod>replaceList($data)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>OrgSettingsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>OrgSettingsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $orgService, KanbanizeAPI $client)</methodSignature>
      <fullMethod>__construct(OrganizationService $orgService, KanbanizeAPI $client)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsController</className>
      <methodName>getList</methodName>
      <methodSignature>getList()</methodSignature>
      <fullMethod>getList()</fullMethod>
      <crap>14.11</crap>
      <complexity>8</complexity>
      <coverage>54.29</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsController</className>
      <methodName>replaceList</methodName>
      <methodSignature>replaceList($data)</methodSignature>
      <fullMethod>replaceList($data)</fullMethod>
      <crap>132</crap>
      <complexity>11</complexity>
      <coverage>0</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsController</className>
      <methodName>serializeProjects</methodName>
      <methodSignature>serializeProjects($projects, Organization $organization)</methodSignature>
      <fullMethod>serializeProjects($projects, Organization $organization)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsController</className>
      <methodName>initApi</methodName>
      <methodSignature>initApi($apiKey, $subdomain)</methodSignature>
      <fullMethod>initApi($apiKey, $subdomain)</fullMethod>
      <crap>3.21</crap>
      <complexity>3</complexity>
      <coverage>71.43</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsController</className>
      <methodName>getKanbanizeClient</methodName>
      <methodSignature>getKanbanizeClient()</methodSignature>
      <fullMethod>getKanbanizeClient()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>StatsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($em)</methodSignature>
      <fullMethod>__construct($em)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>StatsController</className>
      <methodName>statsAction</methodName>
      <methodSignature>statsAction()</methodSignature>
      <fullMethod>statsAction()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeStream</className>
      <methodName>setBoardId</methodName>
      <methodSignature>setBoardId($id)</methodSignature>
      <fullMethod>setBoardId($id)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeStream</className>
      <methodName>getBoardId</methodName>
      <methodSignature>getBoardId()</methodSignature>
      <fullMethod>getBoardId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeStream</className>
      <methodName>setProjectId</methodName>
      <methodSignature>setProjectId($id)</methodSignature>
      <fullMethod>setProjectId($id)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeStream</className>
      <methodName>getProjectId</methodName>
      <methodSignature>getProjectId()</methodSignature>
      <fullMethod>getProjectId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeStream</className>
      <methodName>getType</methodName>
      <methodSignature>getType()</methodSignature>
      <fullMethod>getType()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeTask</className>
      <methodName>setTaskId</methodName>
      <methodSignature>setTaskId($taskId)</methodSignature>
      <fullMethod>setTaskId($taskId)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeTask</className>
      <methodName>getTaskId</methodName>
      <methodSignature>getTaskId()</methodSignature>
      <fullMethod>getTaskId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeTask</className>
      <methodName>setColumnName</methodName>
      <methodSignature>setColumnName($columnName)</methodSignature>
      <fullMethod>setColumnName($columnName)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeTask</className>
      <methodName>getColumnName</methodName>
      <methodSignature>getColumnName()</methodSignature>
      <fullMethod>getColumnName()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeTask</className>
      <methodName>setLaneName</methodName>
      <methodSignature>setLaneName($laneName)</methodSignature>
      <fullMethod>setLaneName($laneName)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeTask</className>
      <methodName>getLaneName</methodName>
      <methodSignature>getLaneName()</methodSignature>
      <fullMethod>getLaneName()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeTask</className>
      <methodName>setAssignee</methodName>
      <methodSignature>setAssignee($assignee)</methodSignature>
      <fullMethod>setAssignee($assignee)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeTask</className>
      <methodName>getAssignee</methodName>
      <methodSignature>getAssignee()</methodSignature>
      <fullMethod>getAssignee()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeTask</className>
      <methodName>getType</methodName>
      <methodSignature>getType()</methodSignature>
      <fullMethod>getType()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Entity</package>
      <className>KanbanizeTask</className>
      <methodName>getResourceId</methodName>
      <methodSignature>getResourceId()</methodSignature>
      <fullMethod>getResourceId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeStream</className>
      <methodName>create</methodName>
      <methodSignature>create(Organization $organization, $subject, User $createdBy, $options = [])</methodSignature>
      <fullMethod>create(Organization $organization, $subject, User $createdBy, $options = [])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeStream</className>
      <methodName>getBoardId</methodName>
      <methodSignature>getBoardId()</methodSignature>
      <fullMethod>getBoardId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeStream</className>
      <methodName>changeBoardId</methodName>
      <methodSignature>changeBoardId($boardId, User $by)</methodSignature>
      <fullMethod>changeBoardId($boardId, User $by)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeStream</className>
      <methodName>whenStreamCreated</methodName>
      <methodSignature>whenStreamCreated(StreamCreated $event)</methodSignature>
      <fullMethod>whenStreamCreated(StreamCreated $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeStream</className>
      <methodName>whenStreamUpdated</methodName>
      <methodSignature>whenStreamUpdated(StreamUpdated $event)</methodSignature>
      <fullMethod>whenStreamUpdated(StreamUpdated $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeTask</className>
      <methodName>create</methodName>
      <methodSignature>create(Stream $stream, $subject, BasicUser $createdBy, array $options = null)</methodSignature>
      <fullMethod>create(Stream $stream, $subject, BasicUser $createdBy, array $options = null)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeTask</className>
      <methodName>getKanbanizeTaskId</methodName>
      <methodSignature>getKanbanizeTaskId()</methodSignature>
      <fullMethod>getKanbanizeTaskId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeTask</className>
      <methodName>setAssignee</methodName>
      <methodSignature>setAssignee($assignee, BasicUser $updatedBy)</methodSignature>
      <fullMethod>setAssignee($assignee, BasicUser $updatedBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeTask</className>
      <methodName>getAssignee</methodName>
      <methodSignature>getAssignee()</methodSignature>
      <fullMethod>getAssignee()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeTask</className>
      <methodName>setColumnName</methodName>
      <methodSignature>setColumnName($name, BasicUser $updatedBy)</methodSignature>
      <fullMethod>setColumnName($name, BasicUser $updatedBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeTask</className>
      <methodName>getColumnName</methodName>
      <methodSignature>getColumnName()</methodSignature>
      <fullMethod>getColumnName()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeTask</className>
      <methodName>setLaneName</methodName>
      <methodSignature>setLaneName($name, BasicUser $updatedBy)</methodSignature>
      <fullMethod>setLaneName($name, BasicUser $updatedBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeTask</className>
      <methodName>getLaneName</methodName>
      <methodSignature>getLaneName()</methodSignature>
      <fullMethod>getLaneName()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeTask</className>
      <methodName>getType</methodName>
      <methodSignature>getType()</methodSignature>
      <fullMethod>getType()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeTask</className>
      <methodName>whenTaskCreated</methodName>
      <methodSignature>whenTaskCreated(TaskCreated $event)</methodSignature>
      <fullMethod>whenTaskCreated(TaskCreated $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeTask</className>
      <methodName>whenTaskUpdated</methodName>
      <methodSignature>whenTaskUpdated(TaskUpdated $event)</methodSignature>
      <fullMethod>whenTaskUpdated(TaskUpdated $event)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeTask</className>
      <methodName>getResourceId</methodName>
      <methodSignature>getResourceId()</methodSignature>
      <fullMethod>getResourceId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>ImportTasksListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $organizationService, NotificationService $notificationService)</methodSignature>
      <fullMethod>__construct(OrganizationService $organizationService, NotificationService $notificationService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>ImportTasksListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>ImportTasksListener</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function(Event $event)</methodSignature>
      <fullMethod>anonymous function(Event $event)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>ImportTasksListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(KanbanizeService $kanbanizeService,
			TaskService $taskService,
			EventStoreTransactionPlugin $transactionManager,
			UserService $userService,
			Organization $organization,
			User $requestedBy,
			KanbanizeAPI $api)</methodSignature>
      <fullMethod>__construct(KanbanizeService $kanbanizeService,
			TaskService $taskService,
			EventStoreTransactionPlugin $transactionManager,
			UserService $userService,
			Organization $organization,
			User $requestedBy,
			KanbanizeAPI $api)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>getErrors</methodName>
      <methodSignature>getErrors()</methodSignature>
      <fullMethod>getErrors()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>getImportResult</methodName>
      <methodSignature>getImportResult()</methodSignature>
      <fullMethod>getImportResult()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>importTasks</methodName>
      <methodSignature>importTasks($boardId, Stream $stream)</methodSignature>
      <fullMethod>importTasks($boardId, Stream $stream)</fullMethod>
      <crap>8.12</crap>
      <complexity>5</complexity>
      <coverage>50</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>importTask</methodName>
      <methodSignature>importTask($boardId, Stream $stream, $kanbanizeTask)</methodSignature>
      <fullMethod>importTask($boardId, Stream $stream, $kanbanizeTask)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>updateTask</methodName>
      <methodSignature>updateTask($boardId, Task $task, $kanbanizeTask, $columnMapping)</methodSignature>
      <fullMethod>updateTask($boardId, Task $task, $kanbanizeTask, $columnMapping)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>createTask</methodName>
      <methodSignature>createTask($kanbanizeTask, Stream $stream)</methodSignature>
      <fullMethod>createTask($kanbanizeTask, Stream $stream)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>updateTaskStatus</methodName>
      <methodSignature>updateTaskStatus(Task $task, $columnName, $columnMapping)</methodSignature>
      <fullMethod>updateTaskStatus(Task $task, $columnName, $columnMapping)</fullMethod>
      <crap>1056</crap>
      <complexity>32</complexity>
      <coverage>0</coverage>
      <crapLoad>33</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>updateTaskOwner</methodName>
      <methodSignature>updateTaskOwner(Task $task, $username)</methodSignature>
      <fullMethod>updateTaskOwner(Task $task, $username)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>ownershipToBeAdded</methodName>
      <methodSignature>ownershipToBeAdded(Task $task, User $new_owner)</methodSignature>
      <fullMethod>ownershipToBeAdded(Task $task, User $new_owner)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>ownershipToBeAssigned</methodName>
      <methodSignature>ownershipToBeAssigned(Task $task, User $new_owner)</methodSignature>
      <fullMethod>ownershipToBeAssigned(Task $task, User $new_owner)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>deleteTasks</methodName>
      <methodSignature>deleteTasks($boardId, Stream $stream, $tasksFound)</methodSignature>
      <fullMethod>deleteTasks($boardId, Stream $stream, $tasksFound)</fullMethod>
      <crap>2.15</crap>
      <complexity>2</complexity>
      <coverage>66.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function($t) use($boardId)</methodSignature>
      <fullMethod>anonymous function($t) use($boardId)</fullMethod>
      <crap>4.81</crap>
      <complexity>2</complexity>
      <coverage>11.11</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>getNewTaskOwner</methodName>
      <methodSignature>getNewTaskOwner($kanbanizeTaskAssignee)</methodSignature>
      <fullMethod>getNewTaskOwner($kanbanizeTaskAssignee)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>setIntervalForAssignShares</methodName>
      <methodSignature>setIntervalForAssignShares(\DateInterval $interval)</methodSignature>
      <fullMethod>setIntervalForAssignShares(\DateInterval $interval)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>Importer</className>
      <methodName>getIntervalForAssignShares</methodName>
      <methodSignature>getIntervalForAssignShares()</methodSignature>
      <fullMethod>getIntervalForAssignShares()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>setApiKey</methodName>
      <methodSignature>setApiKey($k)</methodSignature>
      <fullMethod>setApiKey($k)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>setUrl</methodName>
      <methodSignature>setUrl($url)</methodSignature>
      <fullMethod>setUrl($url)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>executeCall</methodName>
      <methodSignature>executeCall(KanbanizeAPICall $call)</methodSignature>
      <fullMethod>executeCall(KanbanizeAPICall $call)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>doCall</methodName>
      <methodSignature>doCall(KanbanizeAPICall $call)</methodSignature>
      <fullMethod>doCall(KanbanizeAPICall $call)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>moveTask</methodName>
      <methodSignature>moveTask($boardid, $taskid, $column, $options = array())</methodSignature>
      <fullMethod>moveTask($boardid, $taskid, $column, $options = array())</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>getTaskDetails</methodName>
      <methodSignature>getTaskDetails($boardid, $taskid, $options = array ())</methodSignature>
      <fullMethod>getTaskDetails($boardid, $taskid, $options = array ())</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>login</methodName>
      <methodSignature>login($email, $pass)</methodSignature>
      <fullMethod>login($email, $pass)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>createNewTask</methodName>
      <methodSignature>createNewTask($boardid, $data = array())</methodSignature>
      <fullMethod>createNewTask($boardid, $data = array())</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>getBoardSettings</methodName>
      <methodSignature>getBoardSettings($boardid)</methodSignature>
      <fullMethod>getBoardSettings($boardid)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>getBoardStructure</methodName>
      <methodSignature>getBoardStructure($boardid)</methodSignature>
      <fullMethod>getBoardStructure($boardid)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>getStreamsAndBoards</methodName>
      <methodSignature>getStreamsAndBoards()</methodSignature>
      <fullMethod>getStreamsAndBoards()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>getProjectsAndBoards</methodName>
      <methodSignature>getProjectsAndBoards()</methodSignature>
      <fullMethod>getProjectsAndBoards()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>deleteTask</methodName>
      <methodSignature>deleteTask($boardid, $taskid)</methodSignature>
      <fullMethod>deleteTask($boardid, $taskid)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>addComment</methodName>
      <methodSignature>addComment($taskid, $comment)</methodSignature>
      <fullMethod>addComment($taskid, $comment)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>getAllTasks</methodName>
      <methodSignature>getAllTasks($boardid, $options = array())</methodSignature>
      <fullMethod>getAllTasks($boardid, $options = array())</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>blockTask</methodName>
      <methodSignature>blockTask($boardid, $taskid, $event, $blockreason = null)</methodSignature>
      <fullMethod>blockTask($boardid, $taskid, $event, $blockreason = null)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>editTask</methodName>
      <methodSignature>editTask($boardid, $taskid, $changeData = array())</methodSignature>
      <fullMethod>editTask($boardid, $taskid, $changeData = array())</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>getBoardActivities</methodName>
      <methodSignature>getBoardActivities($boardid, $from_date, $to_date, $options = array())</methodSignature>
      <fullMethod>getBoardActivities($boardid, $from_date, $to_date, $options = array())</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>addSubtask</methodName>
      <methodSignature>addSubtask($taskParent, $options = array())</methodSignature>
      <fullMethod>addSubtask($taskParent, $options = array())</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>getFullBoardStructure</methodName>
      <methodSignature>getFullBoardStructure($boardid)</methodSignature>
      <fullMethod>getFullBoardStructure($boardid)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>editSubtask</methodName>
      <methodSignature>editSubtask($boardid, $subtaskid, $options = array())</methodSignature>
      <fullMethod>editSubtask($boardid, $subtaskid, $options = array())</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPI</className>
      <methodName>logTime</methodName>
      <methodSignature>logTime($loggedtime, $taskid, $options = array())</methodSignature>
      <fullMethod>logTime($loggedtime, $taskid, $options = array())</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>resetResponse</methodName>
      <methodSignature>resetResponse()</methodSignature>
      <fullMethod>resetResponse()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>setData</methodName>
      <methodSignature>setData($data)</methodSignature>
      <fullMethod>setData($data)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>getData</methodName>
      <methodSignature>getData()</methodSignature>
      <fullMethod>getData()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>setHeaders</methodName>
      <methodSignature>setHeaders($headers)</methodSignature>
      <fullMethod>setHeaders($headers)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>getHeaders</methodName>
      <methodSignature>getHeaders()</methodSignature>
      <fullMethod>getHeaders()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>setRequestError</methodName>
      <methodSignature>setRequestError($request_error)</methodSignature>
      <fullMethod>setRequestError($request_error)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>getRequestError</methodName>
      <methodSignature>getRequestError()</methodSignature>
      <fullMethod>getRequestError()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>setResponse</methodName>
      <methodSignature>setResponse($response)</methodSignature>
      <fullMethod>setResponse($response)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>getResponse</methodName>
      <methodSignature>getResponse()</methodSignature>
      <fullMethod>getResponse()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>setResponseCode</methodName>
      <methodSignature>setResponseCode($response_code)</methodSignature>
      <fullMethod>setResponseCode($response_code)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>getResponseCode</methodName>
      <methodSignature>getResponseCode()</methodSignature>
      <fullMethod>getResponseCode()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>setFunction</methodName>
      <methodSignature>setFunction($function)</methodSignature>
      <fullMethod>setFunction($function)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>getFunction</methodName>
      <methodSignature>getFunction()</methodSignature>
      <fullMethod>getFunction()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>setFormat</methodName>
      <methodSignature>setFormat($format)</methodSignature>
      <fullMethod>setFormat($format)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>getFormat</methodName>
      <methodSignature>getFormat()</methodSignature>
      <fullMethod>getFormat()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>setFormatJSON</methodName>
      <methodSignature>setFormatJSON()</methodSignature>
      <fullMethod>setFormatJSON()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>setFormatXML</methodName>
      <methodSignature>setFormatXML()</methodSignature>
      <fullMethod>setFormatXML()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>getResponseDecoded</methodName>
      <methodSignature>getResponseDecoded()</methodSignature>
      <fullMethod>getResponseDecoded()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>decodeResponseJSON</methodName>
      <methodSignature>decodeResponseJSON()</methodSignature>
      <fullMethod>decodeResponseJSON()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeAPICall</className>
      <methodName>decodeResponseXML</methodName>
      <methodSignature>decodeResponseXML()</methodSignature>
      <fullMethod>decodeResponseXML()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(EntityManager $em, KanbanizeAPI $api)</methodSignature>
      <fullMethod>__construct(EntityManager $em, KanbanizeAPI $api)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>moveTask</methodName>
      <methodSignature>moveTask(KanbanizeTask $task, $status)</methodSignature>
      <fullMethod>moveTask(KanbanizeTask $task, $status)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>moveTaskonKanbanize</methodName>
      <methodSignature>moveTaskonKanbanize(ReadModelKanbanizeTask $kanbanizeTask, $status,$boardId)</methodSignature>
      <fullMethod>moveTaskonKanbanize(ReadModelKanbanizeTask $kanbanizeTask, $status,$boardId)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>createNewTask</methodName>
      <methodSignature>createNewTask($projectId, $taskSubject,$taskTitle, $boardId, $options)</methodSignature>
      <fullMethod>createNewTask($projectId, $taskSubject,$taskTitle, $boardId, $options)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>deleteTask</methodName>
      <methodSignature>deleteTask(KanbanizeTask $task)</methodSignature>
      <fullMethod>deleteTask(KanbanizeTask $task)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>getTasks</methodName>
      <methodSignature>getTasks($boardId, $status = null)</methodSignature>
      <fullMethod>getTasks($boardId, $status = null)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>acceptTask</methodName>
      <methodSignature>acceptTask(KanbanizeTask $task)</methodSignature>
      <fullMethod>acceptTask(KanbanizeTask $task)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>executeTask</methodName>
      <methodSignature>executeTask(KanbanizeTask $task)</methodSignature>
      <fullMethod>executeTask(KanbanizeTask $task)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>completeTask</methodName>
      <methodSignature>completeTask(KanbanizeTask $task)</methodSignature>
      <fullMethod>completeTask(KanbanizeTask $task)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>closeTask</methodName>
      <methodSignature>closeTask(KanbanizeTask $task)</methodSignature>
      <fullMethod>closeTask(KanbanizeTask $task)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>findStreamByBoardId</methodName>
      <methodSignature>findStreamByBoardId($boardId, $organization)</methodSignature>
      <fullMethod>findStreamByBoardId($boardId, $organization)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>findStreamByProjectId</methodName>
      <methodSignature>findStreamByProjectId($projectId, $organization)</methodSignature>
      <fullMethod>findStreamByProjectId($projectId, $organization)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>findTask</methodName>
      <methodSignature>findTask($taskId, $organization)</methodSignature>
      <fullMethod>findTask($taskId, $organization)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>KanbanizeServiceImpl</className>
      <methodName>initApi</methodName>
      <methodSignature>initApi($apiKey, $subdomain)</methodSignature>
      <fullMethod>initApi($apiKey, $subdomain)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>MailNotificationService</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(MailServiceInterface $mailService, OrganizationService $orgService)</methodSignature>
      <fullMethod>__construct(MailServiceInterface $mailService, OrganizationService $orgService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>MailNotificationService</className>
      <methodName>sendKanbanizeImportResult</methodName>
      <methodSignature>sendKanbanizeImportResult($result, Organization $organization)</methodSignature>
      <fullMethod>sendKanbanizeImportResult($result, Organization $organization)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>StreamCommandsListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>StreamCommandsListener</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function(Event $event)</methodSignature>
      <fullMethod>anonymous function(Event $event)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>StreamCommandsListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>StreamCommandsListener</className>
      <methodName>getPackage</methodName>
      <methodSignature>getPackage()</methodSignature>
      <fullMethod>getPackage()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>SyncTaskListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(KanbanizeService $kanbanizeService, TaskService $taskService)</methodSignature>
      <fullMethod>__construct(KanbanizeService $kanbanizeService, TaskService $taskService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>SyncTaskListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>SyncTaskListener</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function(Event $event)</methodSignature>
      <fullMethod>anonymous function(Event $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>SyncTaskListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(EntityManager $entityManager, TaskService $taskService)</methodSignature>
      <fullMethod>__construct(EntityManager $entityManager, TaskService $taskService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function (Event $event)</methodSignature>
      <fullMethod>anonymous function (Event $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>updateEntity</methodName>
      <methodSignature>updateEntity(ReadModelKanbanizeTask $task, User $updatedBy, $streamEvent)</methodSignature>
      <fullMethod>updateEntity(ReadModelKanbanizeTask $task, User $updatedBy, $streamEvent)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>getPackage</methodName>
      <methodSignature>getPackage()</methodSignature>
      <fullMethod>getPackage()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeBoardSettingsTest</className>
      <methodName>setup</methodName>
      <methodSignature>setup()</methodSignature>
      <fullMethod>setup()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeBoardSettingsTest</className>
      <methodName>testKanbanizeBoardSettingsSuccess</methodName>
      <methodSignature>testKanbanizeBoardSettingsSuccess()</methodSignature>
      <fullMethod>testKanbanizeBoardSettingsSuccess()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeBoardSettingsTest</className>
      <methodName>configureKanbanizeClientMock</methodName>
      <methodSignature>configureKanbanizeClientMock($serviceManager)</methodSignature>
      <fullMethod>configureKanbanizeClientMock($serviceManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeSettingsTest</className>
      <methodName>setup</methodName>
      <methodSignature>setup()</methodSignature>
      <fullMethod>setup()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeSettingsTest</className>
      <methodName>testKanbanizeSettingsSuccess</methodName>
      <methodSignature>testKanbanizeSettingsSuccess()</methodSignature>
      <fullMethod>testKanbanizeSettingsSuccess()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>KanbanizeSettingsTest</className>
      <methodName>configureKanbanizeClientMock</methodName>
      <methodSignature>configureKanbanizeClientMock($serviceManager)</methodSignature>
      <fullMethod>configureKanbanizeClientMock($serviceManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>MailNotificationImportTest</className>
      <methodName>setup</methodName>
      <methodSignature>setup()</methodSignature>
      <fullMethod>setup()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>MailNotificationImportTest</className>
      <methodName>testKanbanizeImportNotification</methodName>
      <methodSignature>testKanbanizeImportNotification()</methodSignature>
      <fullMethod>testKanbanizeImportNotification()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>MailNotificationImportTest</className>
      <methodName>cleanEmailMessages</methodName>
      <methodSignature>cleanEmailMessages()</methodSignature>
      <fullMethod>cleanEmailMessages()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>MailNotificationImportTest</className>
      <methodName>getEmailMessages</methodName>
      <methodSignature>getEmailMessages()</methodSignature>
      <fullMethod>getEmailMessages()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>MailNotificationImportTest</className>
      <methodName>getLastEmailMessage</methodName>
      <methodSignature>getLastEmailMessage()</methodSignature>
      <fullMethod>getLastEmailMessage()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>MailNotificationImportTest</className>
      <methodName>assertEmailHtmlContains</methodName>
      <methodSignature>assertEmailHtmlContains($needle, $email, $description = '')</methodSignature>
      <fullMethod>assertEmailHtmlContains($needle, $email, $description = '')</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize</package>
      <className>MailNotificationImportTest</className>
      <methodName>configureKanbanizeClientMock</methodName>
      <methodSignature>configureKanbanizeClientMock($serviceManager)</methodSignature>
      <fullMethod>configureKanbanizeClientMock($serviceManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>SyncTaskListenerTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>SyncTaskListenerTest</className>
      <methodName>testExecuteACompletedTask</methodName>
      <methodSignature>testExecuteACompletedTask()</methodSignature>
      <fullMethod>testExecuteACompletedTask()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportControllerTest</className>
      <methodName>setupMore</methodName>
      <methodSignature>setupMore()</methodSignature>
      <fullMethod>setupMore()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportControllerTest</className>
      <methodName>testImportAsAnonymous</methodName>
      <methodSignature>testImportAsAnonymous()</methodSignature>
      <fullMethod>testImportAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportControllerTest</className>
      <methodName>testImportWithNotAllowedUser</methodName>
      <methodSignature>testImportWithNotAllowedUser()</methodSignature>
      <fullMethod>testImportWithNotAllowedUser()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>ImportControllerTest</className>
      <methodName>testImportSuccess</methodName>
      <methodSignature>testImportSuccess()</methodSignature>
      <fullMethod>testImportSuccess()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsControllerTest</className>
      <methodName>setupMore</methodName>
      <methodSignature>setupMore()</methodSignature>
      <fullMethod>setupMore()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsControllerTest</className>
      <methodName>testKanbanizeFailsForWrongApiKey</methodName>
      <methodSignature>testKanbanizeFailsForWrongApiKey()</methodSignature>
      <fullMethod>testKanbanizeFailsForWrongApiKey()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Controller</package>
      <className>SettingsControllerTest</className>
      <methodName>testKanbanizeFailsForWrongAccountSubdomain</methodName>
      <methodSignature>testKanbanizeFailsForWrongAccountSubdomain()</methodSignature>
      <fullMethod>testKanbanizeFailsForWrongAccountSubdomain()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>ImporterTest</className>
      <methodName>setup</methodName>
      <methodSignature>setup()</methodSignature>
      <fullMethod>setup()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>ImporterTest</className>
      <methodName>testImportTasks</methodName>
      <methodSignature>testImportTasks()</methodSignature>
      <fullMethod>testImportTasks()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Kanbanize\Service</package>
      <className>ImporterTest</className>
      <methodName>testUpdateTasks</methodName>
      <methodSignature>testUpdateTasks()</methodSignature>
      <fullMethod>testUpdateTasks()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Module</className>
      <methodName>getControllerConfig</methodName>
      <methodSignature>getControllerConfig()</methodSignature>
      <fullMethod>getControllerConfig()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Module</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($serviceLocator)</methodSignature>
      <fullMethod>anonymous function ($serviceLocator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Module</className>
      <methodName>getServiceConfig</methodName>
      <methodSignature>getServiceConfig()</methodSignature>
      <fullMethod>getServiceConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Module</className>
      <methodName>getConfig</methodName>
      <methodSignature>getConfig()</methodSignature>
      <fullMethod>getConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Module</className>
      <methodName>getAutoloaderConfig</methodName>
      <methodSignature>getAutoloaderConfig()</methodSignature>
      <fullMethod>getAutoloaderConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Assertion</package>
      <className>CommonOrganizationAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>4.05</crap>
      <complexity>4</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Assertion</package>
      <className>MemberOfOrganizationAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Assertion</package>
      <className>OwnerOfOrganizationAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>AcceptInviteController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $organizationService)</methodSignature>
      <fullMethod>__construct(OrganizationService $organizationService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>AcceptInviteController</className>
      <methodName>getList</methodName>
      <methodSignature>getList()</methodSignature>
      <fullMethod>getList()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>AcceptInviteController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>AcceptInviteController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>InvitesController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(
		OrganizationService $organizationService,
		MailService $mailService
	)</methodSignature>
      <fullMethod>__construct(
		OrganizationService $organizationService,
		MailService $mailService
	)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>InvitesController</className>
      <methodName>setHost</methodName>
      <methodSignature>setHost($host)</methodSignature>
      <fullMethod>setHost($host)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>InvitesController</className>
      <methodName>createInvitation</methodName>
      <methodSignature>createInvitation($user, $organization, $data)</methodSignature>
      <fullMethod>createInvitation($user, $organization, $data)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>InvitesController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>42</crap>
      <complexity>6</complexity>
      <coverage>0</coverage>
      <crapLoad>6</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>InvitesController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>InvitesController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(
		OrganizationService $organizationService,
		UserService $userService)</methodSignature>
      <fullMethod>__construct(
		OrganizationService $organizationService,
		UserService $userService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersController</className>
      <methodName>getList</methodName>
      <methodSignature>getList()</methodSignature>
      <fullMethod>getList()</fullMethod>
      <crap>6</crap>
      <complexity>6</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersController</className>
      <methodName>create</methodName>
      <methodSignature>create($data)</methodSignature>
      <fullMethod>create($data)</fullMethod>
      <crap>4.04</crap>
      <complexity>4</complexity>
      <coverage>86.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersController</className>
      <methodName>delete</methodName>
      <methodSignature>delete($id)</methodSignature>
      <fullMethod>delete($id)</fullMethod>
      <crap>64.33</crap>
      <complexity>8</complexity>
      <coverage>4.17</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersController</className>
      <methodName>deleteList</methodName>
      <methodSignature>deleteList($data)</methodSignature>
      <fullMethod>deleteList($data)</fullMethod>
      <crap>4.04</crap>
      <complexity>4</complexity>
      <coverage>86.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersController</className>
      <methodName>get</methodName>
      <methodSignature>get($id)</methodSignature>
      <fullMethod>get($id)</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersController</className>
      <methodName>update</methodName>
      <methodSignature>update($id, $data)</methodSignature>
      <fullMethod>update($id, $data)</fullMethod>
      <crap>81.01</crap>
      <complexity>9</complexity>
      <coverage>3.85</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersController</className>
      <methodName>getUserService</methodName>
      <methodSignature>getUserService()</methodSignature>
      <fullMethod>getUserService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersController</className>
      <methodName>serializeOne</methodName>
      <methodSignature>serializeOne(OrganizationMembership $membership)</methodSignature>
      <fullMethod>serializeOne(OrganizationMembership $membership)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $orgService)</methodSignature>
      <fullMethod>__construct(OrganizationService $orgService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsController</className>
      <methodName>getList</methodName>
      <methodSignature>getList()</methodSignature>
      <fullMethod>getList()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsController</className>
      <methodName>create</methodName>
      <methodSignature>create($data)</methodSignature>
      <fullMethod>create($data)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsController</className>
      <methodName>getOrganizationService</methodName>
      <methodSignature>getOrganizationService()</methodSignature>
      <fullMethod>getOrganizationService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsController</className>
      <methodName>serializeOne</methodName>
      <methodSignature>serializeOne($organization)</methodSignature>
      <fullMethod>serializeOne($organization)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>Organization</className>
      <methodName>getName</methodName>
      <methodSignature>getName()</methodSignature>
      <fullMethod>getName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>Organization</className>
      <methodName>setName</methodName>
      <methodSignature>setName($name)</methodSignature>
      <fullMethod>setName($name)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>Organization</className>
      <methodName>setSettings</methodName>
      <methodSignature>setSettings($settingKey, $settingValue)</methodSignature>
      <fullMethod>setSettings($settingKey, $settingValue)</fullMethod>
      <crap>3.03</crap>
      <complexity>3</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>Organization</className>
      <methodName>getSettings</methodName>
      <methodSignature>getSettings($key = null)</methodSignature>
      <fullMethod>getSettings($key = null)</fullMethod>
      <crap>3.07</crap>
      <complexity>3</complexity>
      <coverage>80</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>Organization</className>
      <methodName>getParams</methodName>
      <methodSignature>getParams()</methodSignature>
      <fullMethod>getParams()</fullMethod>
      <crap>2.06</crap>
      <complexity>2</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>Organization</className>
      <methodName>getResourceId</methodName>
      <methodSignature>getResourceId()</methodSignature>
      <fullMethod>getResourceId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(User $user, Organization $organization, $role = self::ROLE_CONTRIBUTOR)</methodSignature>
      <fullMethod>__construct(User $user, Organization $organization, $role = self::ROLE_CONTRIBUTOR)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>setRole</methodName>
      <methodSignature>setRole($role)</methodSignature>
      <fullMethod>setRole($role)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>getRole</methodName>
      <methodSignature>getRole()</methodSignature>
      <fullMethod>getRole()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>getMember</methodName>
      <methodSignature>getMember()</methodSignature>
      <fullMethod>getMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>getOrganization</methodName>
      <methodSignature>getOrganization()</methodSignature>
      <fullMethod>getOrganization()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>getCreatedAt</methodName>
      <methodSignature>getCreatedAt()</methodSignature>
      <fullMethod>getCreatedAt()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>setCreatedAt</methodName>
      <methodSignature>setCreatedAt(\DateTime $when)</methodSignature>
      <fullMethod>setCreatedAt(\DateTime $when)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>getCreatedBy</methodName>
      <methodSignature>getCreatedBy()</methodSignature>
      <fullMethod>getCreatedBy()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>setCreatedBy</methodName>
      <methodSignature>setCreatedBy(User $user)</methodSignature>
      <fullMethod>setCreatedBy(User $user)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>getMostRecentEditAt</methodName>
      <methodSignature>getMostRecentEditAt()</methodSignature>
      <fullMethod>getMostRecentEditAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>setMostRecentEditAt</methodName>
      <methodSignature>setMostRecentEditAt(\DateTime $when)</methodSignature>
      <fullMethod>setMostRecentEditAt(\DateTime $when)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>getMostRecentEditBy</methodName>
      <methodSignature>getMostRecentEditBy()</methodSignature>
      <fullMethod>getMostRecentEditBy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Entity</package>
      <className>OrganizationMembership</className>
      <methodName>setMostRecentEditBy</methodName>
      <methodSignature>setMostRecentEditBy(User $user)</methodSignature>
      <fullMethod>setMostRecentEditBy(User $user)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>MissingOrganizationMembershipException</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($organizationId, $userId)</methodSignature>
      <fullMethod>__construct($organizationId, $userId)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>create</methodName>
      <methodSignature>create($name, User $createdBy)</methodSignature>
      <fullMethod>create($name, User $createdBy)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>setName</methodName>
      <methodSignature>setName($name, User $updatedBy)</methodSignature>
      <fullMethod>setName($name, User $updatedBy)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>setSettings</methodName>
      <methodSignature>setSettings($settingKey, $settingValue, User $updatedBy)</methodSignature>
      <fullMethod>setSettings($settingKey, $settingValue, User $updatedBy)</fullMethod>
      <crap>2.01</crap>
      <complexity>2</complexity>
      <coverage>87.5</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>getParams</methodName>
      <methodSignature>getParams()</methodSignature>
      <fullMethod>getParams()</fullMethod>
      <crap>2.06</crap>
      <complexity>2</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>setParams</methodName>
      <methodSignature>setParams($data, User $updatedBy)</methodSignature>
      <fullMethod>setParams($data, User $updatedBy)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>getSettings</methodName>
      <methodSignature>getSettings($key = null)</methodSignature>
      <fullMethod>getSettings($key = null)</fullMethod>
      <crap>3.07</crap>
      <complexity>3</complexity>
      <coverage>80</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>getName</methodName>
      <methodSignature>getName()</methodSignature>
      <fullMethod>getName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>changeAccount</methodName>
      <methodSignature>changeAccount(Account $account, User $updatedBy)</methodSignature>
      <fullMethod>changeAccount(Account $account, User $updatedBy)</fullMethod>
      <crap>2.06</crap>
      <complexity>2</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>getAccountId</methodName>
      <methodSignature>getAccountId()</methodSignature>
      <fullMethod>getAccountId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>addMember</methodName>
      <methodSignature>addMember(User $user, $role = self::ROLE_CONTRIBUTOR, User $addedBy = null)</methodSignature>
      <fullMethod>addMember(User $user, $role = self::ROLE_CONTRIBUTOR, User $addedBy = null)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>changeMemberRole</methodName>
      <methodSignature>changeMemberRole(User $member, $role, User $changedBy = null)</methodSignature>
      <fullMethod>changeMemberRole(User $member, $role, User $changedBy = null)</fullMethod>
      <crap>3.01</crap>
      <complexity>3</complexity>
      <coverage>90</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>removeMember</methodName>
      <methodSignature>removeMember(User $member, User $removedBy = null)</methodSignature>
      <fullMethod>removeMember(User $member, User $removedBy = null)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>getCreatedAt</methodName>
      <methodSignature>getCreatedAt()</methodSignature>
      <fullMethod>getCreatedAt()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>getMembers</methodName>
      <methodSignature>getMembers()</methodSignature>
      <fullMethod>getMembers()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>getAdmins</methodName>
      <methodSignature>getAdmins()</methodSignature>
      <fullMethod>getAdmins()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function($profile)</methodSignature>
      <fullMethod>anonymous function($profile)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>whenOrganizationCreated</methodName>
      <methodSignature>whenOrganizationCreated(OrganizationCreated $event)</methodSignature>
      <fullMethod>whenOrganizationCreated(OrganizationCreated $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>whenOrganizationUpdated</methodName>
      <methodSignature>whenOrganizationUpdated(OrganizationUpdated $event)</methodSignature>
      <fullMethod>whenOrganizationUpdated(OrganizationUpdated $event)</fullMethod>
      <crap>6.02</crap>
      <complexity>6</complexity>
      <coverage>92.31</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>whenOrganizationAccountChanged</methodName>
      <methodSignature>whenOrganizationAccountChanged(OrganizationAccountChanged $event)</methodSignature>
      <fullMethod>whenOrganizationAccountChanged(OrganizationAccountChanged $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>whenOrganizationMemberAdded</methodName>
      <methodSignature>whenOrganizationMemberAdded(OrganizationMemberAdded $event)</methodSignature>
      <fullMethod>whenOrganizationMemberAdded(OrganizationMemberAdded $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>whenOrganizationMemberRoleChanged</methodName>
      <methodSignature>whenOrganizationMemberRoleChanged(OrganizationMemberRoleChanged $event)</methodSignature>
      <fullMethod>whenOrganizationMemberRoleChanged(OrganizationMemberRoleChanged $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>Organization</className>
      <methodName>whenOrganizationMemberRemoved</methodName>
      <methodSignature>whenOrganizationMemberRemoved(OrganizationMemberRemoved $event)</methodSignature>
      <fullMethod>whenOrganizationMemberRemoved(OrganizationMemberRemoved $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>EventSourcingOrganizationService</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(EventStore $eventStore, EntityManager $entityManager)</methodSignature>
      <fullMethod>__construct(EventStore $eventStore, EntityManager $entityManager)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>EventSourcingOrganizationService</className>
      <methodName>createOrganization</methodName>
      <methodSignature>createOrganization($name, User $createdBy)</methodSignature>
      <fullMethod>createOrganization($name, User $createdBy)</fullMethod>
      <crap>2.06</crap>
      <complexity>2</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>EventSourcingOrganizationService</className>
      <methodName>getOrganization</methodName>
      <methodSignature>getOrganization($id)</methodSignature>
      <fullMethod>getOrganization($id)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>EventSourcingOrganizationService</className>
      <methodName>findOrganization</methodName>
      <methodSignature>findOrganization($id)</methodSignature>
      <fullMethod>findOrganization($id)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>EventSourcingOrganizationService</className>
      <methodName>findUserOrganizationMemberships</methodName>
      <methodSignature>findUserOrganizationMemberships(User $user)</methodSignature>
      <fullMethod>findUserOrganizationMemberships(User $user)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>EventSourcingOrganizationService</className>
      <methodName>findOrganizationMemberships</methodName>
      <methodSignature>findOrganizationMemberships(ReadModelOrg $organization, $limit, $offset, $roles=[])</methodSignature>
      <fullMethod>findOrganizationMemberships(ReadModelOrg $organization, $limit, $offset, $roles=[])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>EventSourcingOrganizationService</className>
      <methodName>countOrganizationMemberships</methodName>
      <methodSignature>countOrganizationMemberships(ReadModelOrg $organization, $roles=[])</methodSignature>
      <fullMethod>countOrganizationMemberships(ReadModelOrg $organization, $roles=[])</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>EventSourcingOrganizationService</className>
      <methodName>findOrganizations</methodName>
      <methodSignature>findOrganizations()</methodSignature>
      <fullMethod>findOrganizations()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>OrganizationCommandsListener</className>
      <methodName>onOrganizationCreated</methodName>
      <methodSignature>onOrganizationCreated(StreamEvent $event)</methodSignature>
      <fullMethod>onOrganizationCreated(StreamEvent $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>OrganizationCommandsListener</className>
      <methodName>onOrganizationUpdated</methodName>
      <methodSignature>onOrganizationUpdated(StreamEvent $event)</methodSignature>
      <fullMethod>onOrganizationUpdated(StreamEvent $event)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>OrganizationCommandsListener</className>
      <methodName>onOrganizationMemberAdded</methodName>
      <methodSignature>onOrganizationMemberAdded(StreamEvent $event)</methodSignature>
      <fullMethod>onOrganizationMemberAdded(StreamEvent $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>OrganizationCommandsListener</className>
      <methodName>onOrganizationMemberRoleChanged</methodName>
      <methodSignature>onOrganizationMemberRoleChanged(StreamEvent $event)</methodSignature>
      <fullMethod>onOrganizationMemberRoleChanged(StreamEvent $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>OrganizationCommandsListener</className>
      <methodName>onOrganizationMemberRemoved</methodName>
      <methodSignature>onOrganizationMemberRemoved(StreamEvent $event)</methodSignature>
      <fullMethod>onOrganizationMemberRemoved(StreamEvent $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>OrganizationCommandsListener</className>
      <methodName>getPackage</methodName>
      <methodSignature>getPackage()</methodSignature>
      <fullMethod>getPackage()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>SendMailListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(MailService $mailService, UserService $userService, OrganizationService $organizationService)</methodSignature>
      <fullMethod>__construct(MailService $mailService, UserService $userService, OrganizationService $organizationService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>SendMailListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>SendMailListener</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function (Event $event)</methodSignature>
      <fullMethod>anonymous function (Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>SendMailListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>SendMailListener</className>
      <methodName>sendMemberAddedInfoMail</methodName>
      <methodSignature>sendMemberAddedInfoMail(Organization $organization, User $member)</methodSignature>
      <fullMethod>sendMemberAddedInfoMail(Organization $organization, User $member)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\ValueObject</package>
      <className>OrganizationParams</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\ValueObject</package>
      <className>OrganizationParams</className>
      <methodName>setInterval</methodName>
      <methodSignature>setInterval($data, $intervalName)</methodSignature>
      <fullMethod>setInterval($data, $intervalName)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\ValueObject</package>
      <className>OrganizationParams</className>
      <methodName>setIntValue</methodName>
      <methodSignature>setIntValue($data, $intName)</methodSignature>
      <fullMethod>setIntValue($data, $intName)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\ValueObject</package>
      <className>OrganizationParams</className>
      <methodName>toArray</methodName>
      <methodSignature>toArray()</methodSignature>
      <fullMethod>toArray()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\ValueObject</package>
      <className>OrganizationParams</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function($item)</methodSignature>
      <fullMethod>anonymous function($item)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\ValueObject</package>
      <className>OrganizationParams</className>
      <methodName>get</methodName>
      <methodSignature>get($key)</methodSignature>
      <fullMethod>get($key)</fullMethod>
      <crap>2.15</crap>
      <complexity>2</complexity>
      <coverage>66.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\ValueObject</package>
      <className>OrganizationParams</className>
      <methodName>createWithDefaults</methodName>
      <methodSignature>createWithDefaults()</methodSignature>
      <fullMethod>createWithDefaults()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\ValueObject</package>
      <className>OrganizationParams</className>
      <methodName>fromArray</methodName>
      <methodSignature>fromArray(array $data)</methodSignature>
      <fullMethod>fromArray(array $data)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>MembersAPITest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>MembersAPITest</className>
      <methodName>testJoinAnOrganization</methodName>
      <methodSignature>testJoinAnOrganization()</methodSignature>
      <fullMethod>testJoinAnOrganization()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testGetListAsAnonymous</methodName>
      <methodSignature>testGetListAsAnonymous()</methodSignature>
      <fullMethod>testGetListAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testGetListWithNotAllowedUser</methodName>
      <methodSignature>testGetListWithNotAllowedUser()</methodSignature>
      <fullMethod>testGetListWithNotAllowedUser()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testGetEmptyList</methodName>
      <methodSignature>testGetEmptyList()</methodSignature>
      <fullMethod>testGetEmptyList()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testGetCompleteList</methodName>
      <methodSignature>testGetCompleteList()</methodSignature>
      <fullMethod>testGetCompleteList()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testGetIncompleteList</methodName>
      <methodSignature>testGetIncompleteList()</methodSignature>
      <fullMethod>testGetIncompleteList()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testCreateAsAnonymous</methodName>
      <methodSignature>testCreateAsAnonymous()</methodSignature>
      <fullMethod>testCreateAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testCreateAnAlreadyMember</methodName>
      <methodSignature>testCreateAnAlreadyMember()</methodSignature>
      <fullMethod>testCreateAnAlreadyMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testCreate</methodName>
      <methodSignature>testCreate()</methodSignature>
      <fullMethod>testCreate()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testDeleteAsAnonymous</methodName>
      <methodSignature>testDeleteAsAnonymous()</methodSignature>
      <fullMethod>testDeleteAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testDeleteNotAMember</methodName>
      <methodSignature>testDeleteNotAMember()</methodSignature>
      <fullMethod>testDeleteNotAMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testDeleteOrganizationMember</methodName>
      <methodSignature>testDeleteOrganizationMember()</methodSignature>
      <fullMethod>testDeleteOrganizationMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testGetAsAnonymous</methodName>
      <methodSignature>testGetAsAnonymous()</methodSignature>
      <fullMethod>testGetAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testGetANotExistingMember</methodName>
      <methodSignature>testGetANotExistingMember()</methodSignature>
      <fullMethod>testGetANotExistingMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testGetAsNotAuthorizedUser</methodName>
      <methodSignature>testGetAsNotAuthorizedUser()</methodSignature>
      <fullMethod>testGetAsNotAuthorizedUser()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>MembersControllerTest</className>
      <methodName>testGet</methodName>
      <methodSignature>testGet()</methodSignature>
      <fullMethod>testGet()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsControllerTest</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsControllerTest</className>
      <methodName>testCreate</methodName>
      <methodSignature>testCreate()</methodSignature>
      <fullMethod>testCreate()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsControllerTest</className>
      <methodName>testCreateWithoutName</methodName>
      <methodSignature>testCreateWithoutName()</methodSignature>
      <fullMethod>testCreateWithoutName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsControllerTest</className>
      <methodName>testCreateWithHtmlTagName</methodName>
      <methodSignature>testCreateWithHtmlTagName()</methodSignature>
      <fullMethod>testCreateWithHtmlTagName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsControllerTest</className>
      <methodName>testCreateAsAnonymous</methodName>
      <methodSignature>testCreateAsAnonymous()</methodSignature>
      <fullMethod>testCreateAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsControllerTest</className>
      <methodName>testGetListAsAnonymous</methodName>
      <methodSignature>testGetListAsAnonymous()</methodSignature>
      <fullMethod>testGetListAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Controller</package>
      <className>OrganizationsControllerTest</className>
      <methodName>testGetEmptyList</methodName>
      <methodSignature>testGetEmptyList()</methodSignature>
      <fullMethod>testGetEmptyList()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testCreate</methodName>
      <methodSignature>testCreate()</methodSignature>
      <fullMethod>testCreate()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testCreateWithoutName</methodName>
      <methodSignature>testCreateWithoutName()</methodSignature>
      <fullMethod>testCreateWithoutName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testSetName</methodName>
      <methodSignature>testSetName()</methodSignature>
      <fullMethod>testSetName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testChangeAccount</methodName>
      <methodSignature>testChangeAccount()</methodSignature>
      <fullMethod>testChangeAccount()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testAddContributor</methodName>
      <methodSignature>testAddContributor()</methodSignature>
      <fullMethod>testAddContributor()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testAddMember</methodName>
      <methodSignature>testAddMember()</methodSignature>
      <fullMethod>testAddMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testAddMemberAsAdmin</methodName>
      <methodSignature>testAddMemberAsAdmin()</methodSignature>
      <fullMethod>testAddMemberAsAdmin()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testPromoteContributorToMember</methodName>
      <methodSignature>testPromoteContributorToMember()</methodSignature>
      <fullMethod>testPromoteContributorToMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testReaddMember</methodName>
      <methodSignature>testReaddMember()</methodSignature>
      <fullMethod>testReaddMember()</fullMethod>
      <crap>1.04</crap>
      <complexity>1</complexity>
      <coverage>66.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testRemoveMember</methodName>
      <methodSignature>testRemoveMember()</methodSignature>
      <fullMethod>testRemoveMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testRemoveANonMember</methodName>
      <methodSignature>testRemoveANonMember()</methodSignature>
      <fullMethod>testRemoveANonMember()</fullMethod>
      <crap>1.02</crap>
      <complexity>1</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testGetAdminsAfterCreation</methodName>
      <methodSignature>testGetAdminsAfterCreation()</methodSignature>
      <fullMethod>testGetAdminsAfterCreation()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testGetAdminsAfterMemberAdded</methodName>
      <methodSignature>testGetAdminsAfterMemberAdded()</methodSignature>
      <fullMethod>testGetAdminsAfterMemberAdded()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People</package>
      <className>OrganizationTest</className>
      <methodName>testGetAdminsAfterAdminAdded</methodName>
      <methodSignature>testGetAdminsAfterAdminAdded()</methodSignature>
      <fullMethod>testGetAdminsAfterAdminAdded()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>EventSourcingOrganizationServiceTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>EventSourcingOrganizationServiceTest</className>
      <methodName>testCreateOrganization</methodName>
      <methodSignature>testCreateOrganization()</methodSignature>
      <fullMethod>testCreateOrganization()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>People\Service</package>
      <className>EventSourcingOrganizationServiceTest</className>
      <methodName>testCreateOrganizationWithoutName</methodName>
      <methodSignature>testCreateOrganizationWithoutName()</methodSignature>
      <fullMethod>testCreateOrganizationWithoutName()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Module</className>
      <methodName>getControllerConfig</methodName>
      <methodSignature>getControllerConfig()</methodSignature>
      <fullMethod>getControllerConfig()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Module</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function ($locator)</methodSignature>
      <fullMethod>anonymous function ($locator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Module</className>
      <methodName>getServiceConfig</methodName>
      <methodSignature>getServiceConfig()</methodSignature>
      <fullMethod>getServiceConfig()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Module</className>
      <methodName>getConfig</methodName>
      <methodSignature>getConfig()</methodSignature>
      <fullMethod>getConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Module</className>
      <methodName>getAutoloaderConfig</methodName>
      <methodSignature>getAutoloaderConfig()</methodSignature>
      <fullMethod>getAutoloaderConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>AcceptedTaskAndMemberSharesNotAssignedAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>ItemOwnerAndNotClosedItemAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>ItemOwnerAndNotExpiredItemDeletionAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>ItemOwnerAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>MemberOfOngoingTaskAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>NotCompletedTaskAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>OrganizationMemberNotTaskMemberAndNotCompletedTaskAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>OwnerOfWorkItemIdeaOrOpenOrCompletedTaskAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>TaskMemberAndCompletedTaskAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>TaskMemberNotOwnerAndNotCompletedTaskAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>TaskOwnerAndAcceptedTaskAndSharesExpiredAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>TaskOwnerAndCompletedTaskWithEstimationProcessCompletedAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>TaskOwnerAndNotCompletedTaskAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>TaskOwnerAndOngoingOrAcceptedTaskAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>TaskOwnerAndOngoingTaskAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Assertion</package>
      <className>WorkItemIdeaAndOrganizationMemberNotVotedAssertion</className>
      <methodName>assert</methodName>
      <methodSignature>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</methodSignature>
      <fullMethod>assert(Acl $acl, RoleInterface $user = null, ResourceInterface $resource = null, $privilege = null)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AcceptancesController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(TaskService $taskService)</methodSignature>
      <fullMethod>__construct(TaskService $taskService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AcceptancesController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AcceptancesController</className>
      <methodName>getTaskService</methodName>
      <methodSignature>getTaskService()</methodSignature>
      <fullMethod>getTaskService()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AcceptancesController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AcceptancesController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>ApprovalsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(TaskService $taskService)</methodSignature>
      <fullMethod>__construct(TaskService $taskService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>ApprovalsController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>ApprovalsController</className>
      <methodName>getTaskService</methodName>
      <methodSignature>getTaskService()</methodSignature>
      <fullMethod>getTaskService()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>ApprovalsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>ApprovalsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AttachmentsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(TaskService $taskService)</methodSignature>
      <fullMethod>__construct(TaskService $taskService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AttachmentsController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AttachmentsController</className>
      <methodName>getTaskService</methodName>
      <methodSignature>getTaskService()</methodSignature>
      <fullMethod>getTaskService()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AttachmentsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AttachmentsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller\Console</package>
      <className>RemindersController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(
		TaskService $taskService,
		MailService $mailService,
		OrganizationService $organizationService)</methodSignature>
      <fullMethod>__construct(
		TaskService $taskService,
		MailService $mailService,
		OrganizationService $organizationService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller\Console</package>
      <className>RemindersController</className>
      <methodName>setHost</methodName>
      <methodSignature>setHost($host)</methodSignature>
      <fullMethod>setHost($host)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller\Console</package>
      <className>RemindersController</className>
      <methodName>sendAction</methodName>
      <methodSignature>sendAction()</methodSignature>
      <fullMethod>sendAction()</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>EstimationsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(TaskService $taskService)</methodSignature>
      <fullMethod>__construct(TaskService $taskService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>EstimationsController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>EstimationsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>HistoryController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(TaskService $taskService)</methodSignature>
      <fullMethod>__construct(TaskService $taskService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>HistoryController</className>
      <methodName>get</methodName>
      <methodSignature>get($id)</methodSignature>
      <fullMethod>get($id)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>HistoryController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>HistoryController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MemberStatsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $orgService, TaskService $taskService, UserService $userService)</methodSignature>
      <fullMethod>__construct(OrganizationService $orgService, TaskService $taskService, UserService $userService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MemberStatsController</className>
      <methodName>get</methodName>
      <methodSignature>get($id)</methodSignature>
      <fullMethod>get($id)</fullMethod>
      <crap>7.05</crap>
      <complexity>6</complexity>
      <coverage>69.23</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MemberStatsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MemberStatsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MemberStatsController</className>
      <methodName>getUserService</methodName>
      <methodSignature>getUserService()</methodSignature>
      <fullMethod>getUserService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MemberStatsController</className>
      <methodName>getTaskService</methodName>
      <methodSignature>getTaskService()</methodSignature>
      <fullMethod>getTaskService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MembersController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $orgService, TaskService $taskService, UserService $userService)</methodSignature>
      <fullMethod>__construct(OrganizationService $orgService, TaskService $taskService, UserService $userService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MembersController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MembersController</className>
      <methodName>delete</methodName>
      <methodSignature>delete($id)</methodSignature>
      <fullMethod>delete($id)</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MembersController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>OwnerController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(OrganizationService $orgService, TaskService $taskService, UserService $userService)</methodSignature>
      <fullMethod>__construct(OrganizationService $orgService, TaskService $taskService, UserService $userService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>OwnerController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>OwnerController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>RemindersController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(
 		NotificationService $notificationService,
 		TaskService $taskService,
 		OrganizationService $organizationService)</methodSignature>
      <fullMethod>__construct(
 		NotificationService $notificationService,
 		TaskService $taskService,
 		OrganizationService $organizationService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>RemindersController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>5.04</crap>
      <complexity>5</complexity>
      <coverage>88.24</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>RemindersController</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function($value)</methodSignature>
      <fullMethod>anonymous function($value)</fullMethod>
      <crap>1.3</crap>
      <complexity>1</complexity>
      <coverage>33.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>RemindersController</className>
      <methodName>create</methodName>
      <methodSignature>create($data)</methodSignature>
      <fullMethod>create($data)</fullMethod>
      <crap>6.13</crap>
      <complexity>6</complexity>
      <coverage>84.62</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>RemindersController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>RemindersController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(TaskService $taskService)</methodSignature>
      <fullMethod>__construct(TaskService $taskService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>14.78</crap>
      <complexity>12</complexity>
      <coverage>73.17</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesController</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function(&amp;$value)</methodSignature>
      <fullMethod>anonymous function(&amp;$value)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesController</className>
      <methodName>getTaskService</methodName>
      <methodSignature>getTaskService()</methodSignature>
      <fullMethod>getTaskService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(StreamService $streamService, OrganizationService $organizationService)</methodSignature>
      <fullMethod>__construct(StreamService $streamService, OrganizationService $organizationService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsController</className>
      <methodName>getList</methodName>
      <methodSignature>getList()</methodSignature>
      <fullMethod>getList()</fullMethod>
      <crap>4.04</crap>
      <complexity>4</complexity>
      <coverage>86.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsController</className>
      <methodName>create</methodName>
      <methodSignature>create($data)</methodSignature>
      <fullMethod>create($data)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsController</className>
      <methodName>getStreamService</methodName>
      <methodSignature>getStreamService()</methodSignature>
      <fullMethod>getStreamService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsController</className>
      <methodName>serializeOne</methodName>
      <methodSignature>serializeOne($stream)</methodSignature>
      <fullMethod>serializeOne($stream)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(
		TaskService $taskService,
		StreamService $streamService,
		OrganizationService $organizationService,
		KanbanizeService $kanbanizeService)</methodSignature>
      <fullMethod>__construct(
		TaskService $taskService,
		StreamService $streamService,
		OrganizationService $organizationService,
		KanbanizeService $kanbanizeService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksController</className>
      <methodName>get</methodName>
      <methodSignature>get($id)</methodSignature>
      <fullMethod>get($id)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksController</className>
      <methodName>getList</methodName>
      <methodSignature>getList()</methodSignature>
      <fullMethod>getList()</fullMethod>
      <crap>22.4</crap>
      <complexity>21</complexity>
      <coverage>85.29</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksController</className>
      <methodName>create</methodName>
      <methodSignature>create($data)</methodSignature>
      <fullMethod>create($data)</fullMethod>
      <crap>493.48</crap>
      <complexity>22</complexity>
      <coverage>0.87</coverage>
      <crapLoad>23</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksController</className>
      <methodName>update</methodName>
      <methodSignature>update($id, $data)</methodSignature>
      <fullMethod>update($id, $data)</fullMethod>
      <crap>110</crap>
      <complexity>10</complexity>
      <coverage>0</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksController</className>
      <methodName>delete</methodName>
      <methodSignature>delete($id)</methodSignature>
      <fullMethod>delete($id)</fullMethod>
      <crap>9.89</crap>
      <complexity>6</complexity>
      <coverage>52.38</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksController</className>
      <methodName>getTaskService</methodName>
      <methodSignature>getTaskService()</methodSignature>
      <fullMethod>getTaskService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TransitionsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(
		TaskService $taskService,
		OrganizationService $organizationService)</methodSignature>
      <fullMethod>__construct(
		TaskService $taskService,
		OrganizationService $organizationService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TransitionsController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>462</crap>
      <complexity>21</complexity>
      <coverage>0</coverage>
      <crapLoad>22</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TransitionsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TransitionsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TransitionsController</className>
      <methodName>getTaskService</methodName>
      <methodSignature>getTaskService()</methodSignature>
      <fullMethod>getTaskService()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>VotingResultsController</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(
		TaskService $taskService,
		OrganizationService $organizationService
	)</methodSignature>
      <fullMethod>__construct(
		TaskService $taskService,
		OrganizationService $organizationService
	)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>VotingResultsController</className>
      <methodName>create</methodName>
      <methodSignature>create($data)</methodSignature>
      <fullMethod>create($data)</fullMethod>
      <crap>88.11</crap>
      <complexity>15</complexity>
      <coverage>31.25</coverage>
      <crapLoad>11</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>VotingResultsController</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function($completed) use (&amp;$operationResult)</methodSignature>
      <fullMethod>anonymous function($completed) use (&amp;$operationResult)</fullMethod>
      <crap>3.27</crap>
      <complexity>3</complexity>
      <coverage>68.75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>VotingResultsController</className>
      <methodName>getTaskService</methodName>
      <methodSignature>getTaskService()</methodSignature>
      <fullMethod>getTaskService()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>VotingResultsController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>VotingResultsController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>getId</methodName>
      <methodSignature>getId()</methodSignature>
      <fullMethod>getId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>getItem</methodName>
      <methodSignature>getItem()</methodSignature>
      <fullMethod>getItem()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>setItem</methodName>
      <methodSignature>setItem(Task $item)</methodSignature>
      <fullMethod>setItem(Task $item)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>getVoter</methodName>
      <methodSignature>getVoter()</methodSignature>
      <fullMethod>getVoter()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>setVoter</methodName>
      <methodSignature>setVoter(User $user)</methodSignature>
      <fullMethod>setVoter(User $user)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>getVote</methodName>
      <methodSignature>getVote()</methodSignature>
      <fullMethod>getVote()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>setVote</methodName>
      <methodSignature>setVote($vote)</methodSignature>
      <fullMethod>setVote($vote)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>getCreatedAt</methodName>
      <methodSignature>getCreatedAt()</methodSignature>
      <fullMethod>getCreatedAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>setCreatedAt</methodName>
      <methodSignature>setCreatedAt(\DateTime $when)</methodSignature>
      <fullMethod>setCreatedAt(\DateTime $when)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>getCreatedBy</methodName>
      <methodSignature>getCreatedBy()</methodSignature>
      <fullMethod>getCreatedBy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>setCreatedBy</methodName>
      <methodSignature>setCreatedBy(User $user)</methodSignature>
      <fullMethod>setCreatedBy(User $user)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>getMostRecentEditAt</methodName>
      <methodSignature>getMostRecentEditAt()</methodSignature>
      <fullMethod>getMostRecentEditAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>setMostRecentEditAt</methodName>
      <methodSignature>setMostRecentEditAt(\DateTime $when)</methodSignature>
      <fullMethod>setMostRecentEditAt(\DateTime $when)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>getMostRecentEditBy</methodName>
      <methodSignature>getMostRecentEditBy()</methodSignature>
      <fullMethod>getMostRecentEditBy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>setMostRecentEditBy</methodName>
      <methodSignature>setMostRecentEditBy(User $user)</methodSignature>
      <fullMethod>setMostRecentEditBy(User $user)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>getDescription</methodName>
      <methodSignature>getDescription()</methodSignature>
      <fullMethod>getDescription()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Approval</className>
      <methodName>setDescription</methodName>
      <methodSignature>setDescription($description)</methodSignature>
      <fullMethod>setDescription($description)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Estimation</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($value, \DateTime $createdAt)</methodSignature>
      <fullMethod>__construct($value, \DateTime $createdAt)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Estimation</className>
      <methodName>getValue</methodName>
      <methodSignature>getValue()</methodSignature>
      <fullMethod>getValue()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Estimation</className>
      <methodName>getCreatedAt</methodName>
      <methodSignature>getCreatedAt()</methodSignature>
      <fullMethod>getCreatedAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>ItemCompletedAcceptance</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(Vote $vote, \DateTime $createdAt)</methodSignature>
      <fullMethod>__construct(Vote $vote, \DateTime $createdAt)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>ItemIdeaApproval</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(Vote $vote, \DateTime $createdAt)</methodSignature>
      <fullMethod>__construct(Vote $vote, \DateTime $createdAt)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Share</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(TaskMember $evaluator, TaskMember $valued)</methodSignature>
      <fullMethod>__construct(TaskMember $evaluator, TaskMember $valued)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Share</className>
      <methodName>setValue</methodName>
      <methodSignature>setValue($value)</methodSignature>
      <fullMethod>setValue($value)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Share</className>
      <methodName>getValue</methodName>
      <methodSignature>getValue()</methodSignature>
      <fullMethod>getValue()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Share</className>
      <methodName>getEvaluator</methodName>
      <methodSignature>getEvaluator()</methodSignature>
      <fullMethod>getEvaluator()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Share</className>
      <methodName>getValued</methodName>
      <methodSignature>getValued()</methodSignature>
      <fullMethod>getValued()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Share</className>
      <methodName>setCreatedAt</methodName>
      <methodSignature>setCreatedAt(\DateTime $when)</methodSignature>
      <fullMethod>setCreatedAt(\DateTime $when)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Share</className>
      <methodName>getCreatedAt</methodName>
      <methodSignature>getCreatedAt()</methodSignature>
      <fullMethod>getCreatedAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Stream</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($id, Organization $organization)</methodSignature>
      <fullMethod>__construct($id, Organization $organization)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Stream</className>
      <methodName>getSubject</methodName>
      <methodSignature>getSubject()</methodSignature>
      <fullMethod>getSubject()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Stream</className>
      <methodName>setSubject</methodName>
      <methodSignature>setSubject($subject)</methodSignature>
      <fullMethod>setSubject($subject)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Stream</className>
      <methodName>getOrganization</methodName>
      <methodSignature>getOrganization()</methodSignature>
      <fullMethod>getOrganization()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Stream</className>
      <methodName>getType</methodName>
      <methodSignature>getType()</methodSignature>
      <fullMethod>getType()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($id, Stream $stream, $is_decision = false)</methodSignature>
      <fullMethod>__construct($id, Stream $stream, $is_decision = false)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>isDecision</methodName>
      <methodSignature>isDecision()</methodSignature>
      <fullMethod>isDecision()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getAttachments</methodName>
      <methodSignature>getAttachments()</methodSignature>
      <fullMethod>getAttachments()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>setAttachments</methodName>
      <methodSignature>setAttachments($attachments)</methodSignature>
      <fullMethod>setAttachments($attachments)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getLane</methodName>
      <methodSignature>getLane()</methodSignature>
      <fullMethod>getLane()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>setLane</methodName>
      <methodSignature>setLane($lane)</methodSignature>
      <fullMethod>setLane($lane)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getSubject</methodName>
      <methodSignature>getSubject()</methodSignature>
      <fullMethod>getSubject()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>setSubject</methodName>
      <methodSignature>setSubject($subject)</methodSignature>
      <fullMethod>setSubject($subject)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getDescription</methodName>
      <methodSignature>getDescription()</methodSignature>
      <fullMethod>getDescription()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>setDescription</methodName>
      <methodSignature>setDescription($description)</methodSignature>
      <fullMethod>setDescription($description)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getStream</methodName>
      <methodSignature>getStream()</methodSignature>
      <fullMethod>getStream()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getStreamId</methodName>
      <methodSignature>getStreamId()</methodSignature>
      <fullMethod>getStreamId()</fullMethod>
      <crap>2.15</crap>
      <complexity>2</complexity>
      <coverage>66.67</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>setStream</methodName>
      <methodSignature>setStream(Stream $stream)</methodSignature>
      <fullMethod>setStream(Stream $stream)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getOrganizationId</methodName>
      <methodSignature>getOrganizationId()</methodSignature>
      <fullMethod>getOrganizationId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>addMember</methodName>
      <methodSignature>addMember(User $user, $role, BasicUser $by, \DateTime $when)</methodSignature>
      <fullMethod>addMember(User $user, $role, BasicUser $by, \DateTime $when)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>addApproval</methodName>
      <methodSignature>addApproval (Vote $vote, BasicUser $by, \DateTime $when ,$description)</methodSignature>
      <fullMethod>addApproval (Vote $vote, BasicUser $by, \DateTime $when ,$description)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>addAcceptance</methodName>
      <methodSignature>addAcceptance (Vote $vote, BasicUser $by, \DateTime $when ,$description)</methodSignature>
      <fullMethod>addAcceptance (Vote $vote, BasicUser $by, \DateTime $when ,$description)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>removeAcceptances</methodName>
      <methodSignature>removeAcceptances()</methodSignature>
      <fullMethod>removeAcceptances()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>removeMember</methodName>
      <methodSignature>removeMember($member)</methodSignature>
      <fullMethod>removeMember($member)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getMember</methodName>
      <methodSignature>getMember($user)</methodSignature>
      <fullMethod>getMember($user)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getOwner</methodName>
      <methodSignature>getOwner()</methodSignature>
      <fullMethod>getOwner()</fullMethod>
      <crap>3.58</crap>
      <complexity>3</complexity>
      <coverage>60</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>hasMember</methodName>
      <methodSignature>hasMember($user)</methodSignature>
      <fullMethod>hasMember($user)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getMembers</methodName>
      <methodSignature>getMembers()</methodSignature>
      <fullMethod>getMembers()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getApprovals</methodName>
      <methodSignature>getApprovals()</methodSignature>
      <fullMethod>getApprovals()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getAcceptances</methodName>
      <methodSignature>getAcceptances()</methodSignature>
      <fullMethod>getAcceptances()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getStatus</methodName>
      <methodSignature>getStatus()</methodSignature>
      <fullMethod>getStatus()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>setStatus</methodName>
      <methodSignature>setStatus($status)</methodSignature>
      <fullMethod>setStatus($status)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getType</methodName>
      <methodSignature>getType()</methodSignature>
      <fullMethod>getType()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getAverageEstimation</methodName>
      <methodSignature>getAverageEstimation()</methodSignature>
      <fullMethod>getAverageEstimation()</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>resetShares</methodName>
      <methodSignature>resetShares()</methodSignature>
      <fullMethod>resetShares()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>updateMembersShare</methodName>
      <methodSignature>updateMembersShare(\DateTime $when)</methodSignature>
      <fullMethod>updateMembersShare(\DateTime $when)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getMembersShare</methodName>
      <methodSignature>getMembersShare()</methodSignature>
      <fullMethod>getMembersShare()</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function($member)</methodSignature>
      <fullMethod>anonymous function($member)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getResourceId</methodName>
      <methodSignature>getResourceId()</methodSignature>
      <fullMethod>getResourceId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getMemberRole</methodName>
      <methodSignature>getMemberRole($user)</methodSignature>
      <fullMethod>getMemberRole($user)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getAcceptedAt</methodName>
      <methodSignature>getAcceptedAt()</methodSignature>
      <fullMethod>getAcceptedAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>setAcceptedAt</methodName>
      <methodSignature>setAcceptedAt(\DateTime $date)</methodSignature>
      <fullMethod>setAcceptedAt(\DateTime $date)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>getSharesAssignmentExpiresAt</methodName>
      <methodSignature>getSharesAssignmentExpiresAt()</methodSignature>
      <fullMethod>getSharesAssignmentExpiresAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>setSharesAssignmentExpiresAt</methodName>
      <methodSignature>setSharesAssignmentExpiresAt(\DateTime $date)</methodSignature>
      <fullMethod>setSharesAssignmentExpiresAt(\DateTime $date)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>resetAcceptedAt</methodName>
      <methodSignature>resetAcceptedAt()</methodSignature>
      <fullMethod>resetAcceptedAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>findMembersWithEmptyShares</methodName>
      <methodSignature>findMembersWithEmptyShares()</methodSignature>
      <fullMethod>findMembersWithEmptyShares()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>findMembersWithNoApproval</methodName>
      <methodSignature>findMembersWithNoApproval()</methodSignature>
      <fullMethod>findMembersWithNoApproval()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>findMembersWithNoEstimation</methodName>
      <methodSignature>findMembersWithNoEstimation()</methodSignature>
      <fullMethod>findMembersWithNoEstimation()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>areSharesAssignedFromMember</methodName>
      <methodSignature>areSharesAssignedFromMember($user)</methodSignature>
      <fullMethod>areSharesAssignedFromMember($user)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>isIdeaVotedFromMember</methodName>
      <methodSignature>isIdeaVotedFromMember($user)</methodSignature>
      <fullMethod>isIdeaVotedFromMember($user)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>isCompletedVotedFromMember</methodName>
      <methodSignature>isCompletedVotedFromMember($user)</methodSignature>
      <fullMethod>isCompletedVotedFromMember($user)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>isSharesAssignmentCompleted</methodName>
      <methodSignature>isSharesAssignmentCompleted()</methodSignature>
      <fullMethod>isSharesAssignmentCompleted()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Task</className>
      <methodName>isSharesAssignmentExpired</methodName>
      <methodSignature>isSharesAssignmentExpired(\DateTime $ref)</methodSignature>
      <fullMethod>isSharesAssignmentExpired(\DateTime $ref)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(Task $task, User $user, $role)</methodSignature>
      <fullMethod>__construct(Task $task, User $user, $role)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getRole</methodName>
      <methodSignature>getRole()</methodSignature>
      <fullMethod>getRole()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getMember</methodName>
      <methodSignature>getMember()</methodSignature>
      <fullMethod>getMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getUser</methodName>
      <methodSignature>getUser()</methodSignature>
      <fullMethod>getUser()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getTask</methodName>
      <methodSignature>getTask()</methodSignature>
      <fullMethod>getTask()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getEstimation</methodName>
      <methodSignature>getEstimation()</methodSignature>
      <fullMethod>getEstimation()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>hasEstimated</methodName>
      <methodSignature>hasEstimated()</methodSignature>
      <fullMethod>hasEstimated()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>setEstimation</methodName>
      <methodSignature>setEstimation(Estimation $estimation)</methodSignature>
      <fullMethod>setEstimation(Estimation $estimation)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getCreatedAt</methodName>
      <methodSignature>getCreatedAt()</methodSignature>
      <fullMethod>getCreatedAt()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>setCreatedAt</methodName>
      <methodSignature>setCreatedAt(\DateTime $when)</methodSignature>
      <fullMethod>setCreatedAt(\DateTime $when)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getCreatedBy</methodName>
      <methodSignature>getCreatedBy()</methodSignature>
      <fullMethod>getCreatedBy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>setCreatedBy</methodName>
      <methodSignature>setCreatedBy(User $user)</methodSignature>
      <fullMethod>setCreatedBy(User $user)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getMostRecentEditAt</methodName>
      <methodSignature>getMostRecentEditAt()</methodSignature>
      <fullMethod>getMostRecentEditAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>setMostRecentEditAt</methodName>
      <methodSignature>setMostRecentEditAt(\DateTime $when)</methodSignature>
      <fullMethod>setMostRecentEditAt(\DateTime $when)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getMostRecentEditBy</methodName>
      <methodSignature>getMostRecentEditBy()</methodSignature>
      <fullMethod>getMostRecentEditBy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>setMostRecentEditBy</methodName>
      <methodSignature>setMostRecentEditBy(User $user)</methodSignature>
      <fullMethod>setMostRecentEditBy(User $user)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>assignShare</methodName>
      <methodSignature>assignShare(TaskMember $valued, $value, \DateTime $when)</methodSignature>
      <fullMethod>assignShare(TaskMember $valued, $value, \DateTime $when)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getShareValueOf</methodName>
      <methodSignature>getShareValueOf(TaskMember $valued)</methodSignature>
      <fullMethod>getShareValueOf(TaskMember $valued)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>resetShares</methodName>
      <methodSignature>resetShares()</methodSignature>
      <fullMethod>resetShares()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getShares</methodName>
      <methodSignature>getShares()</methodSignature>
      <fullMethod>getShares()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>setShare</methodName>
      <methodSignature>setShare($value, \DateTime $when)</methodSignature>
      <fullMethod>setShare($value, \DateTime $when)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getShare</methodName>
      <methodSignature>getShare()</methodSignature>
      <fullMethod>getShare()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getDelta</methodName>
      <methodSignature>getDelta()</methodSignature>
      <fullMethod>getDelta()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>removeTask</methodName>
      <methodSignature>removeTask()</methodSignature>
      <fullMethod>removeTask()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>getCredits</methodName>
      <methodSignature>getCredits()</methodSignature>
      <fullMethod>getCredits()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>setCredits</methodName>
      <methodSignature>setCredits($credits)</methodSignature>
      <fullMethod>setCredits($credits)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>TaskMember</className>
      <methodName>setRole</methodName>
      <methodSignature>setRole($role)</methodSignature>
      <fullMethod>setRole($role)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Vote</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(\DateTime $date)</methodSignature>
      <fullMethod>__construct(\DateTime $date)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Vote</className>
      <methodName>getValue</methodName>
      <methodSignature>getValue()</methodSignature>
      <fullMethod>getValue()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Vote</className>
      <methodName>setValue</methodName>
      <methodSignature>setValue($val)</methodSignature>
      <fullMethod>setValue($val)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Entity</package>
      <className>Vote</className>
      <methodName>getDate</methodName>
      <methodSignature>getDate()</methodSignature>
      <fullMethod>getDate()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>AcceptCompletedItemListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(
		TaskService $taskService,
		UserService $userService,
		OrganizationService $organizationService,
		EventStore $transactionManager)</methodSignature>
      <fullMethod>__construct(
		TaskService $taskService,
		UserService $userService,
		OrganizationService $organizationService,
		EventStore $transactionManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>AcceptCompletedItemListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>AcceptCompletedItemListener</className>
      <methodName>processEvent</methodName>
      <methodSignature>processEvent(Event $event)</methodSignature>
      <fullMethod>processEvent(Event $event)</fullMethod>
      <crap>182</crap>
      <complexity>13</complexity>
      <coverage>0</coverage>
      <crapLoad>13</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>AcceptCompletedItemListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>AssignCreditsListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(TaskService $taskService, UserService $userService, EventStore $transactionManager)</methodSignature>
      <fullMethod>__construct(TaskService $taskService, UserService $userService, EventStore $transactionManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>AssignCreditsListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>AssignCreditsListener</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function(Event $event)</methodSignature>
      <fullMethod>anonymous function(Event $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>AssignCreditsListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>CloseItemIdeaListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(TaskService $taskService, UserService $userService, OrganizationService $organizationService, EventStore $transactionManager)</methodSignature>
      <fullMethod>__construct(TaskService $taskService, UserService $userService, OrganizationService $organizationService, EventStore $transactionManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>CloseItemIdeaListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>CloseItemIdeaListener</className>
      <methodName>processEvent</methodName>
      <methodSignature>processEvent(Event $event)</methodSignature>
      <fullMethod>processEvent(Event $event)</fullMethod>
      <crap>182</crap>
      <complexity>13</complexity>
      <coverage>0</coverage>
      <crapLoad>13</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>CloseItemIdeaListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>CloseTaskListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(TaskService $taskService, UserService $userService, EventStore $transactionManager)</methodSignature>
      <fullMethod>__construct(TaskService $taskService, UserService $userService, EventStore $transactionManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>CloseTaskListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>CloseTaskListener</className>
      <methodName>processEvent</methodName>
      <methodSignature>processEvent(Event $event)</methodSignature>
      <fullMethod>processEvent(Event $event)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>CloseTaskListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingStreamService</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(EventStore $eventStore, EntityManager $entityManager)</methodSignature>
      <fullMethod>__construct(EventStore $eventStore, EntityManager $entityManager)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingStreamService</className>
      <methodName>addStream</methodName>
      <methodSignature>addStream(Stream $stream)</methodSignature>
      <fullMethod>addStream(Stream $stream)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingStreamService</className>
      <methodName>addKanbanizeStream</methodName>
      <methodSignature>addKanbanizeStream(KanbanizeStream $stream)</methodSignature>
      <fullMethod>addKanbanizeStream(KanbanizeStream $stream)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingStreamService</className>
      <methodName>createStream</methodName>
      <methodSignature>createStream(Organization $organization, $subject, User $createdBy)</methodSignature>
      <fullMethod>createStream(Organization $organization, $subject, User $createdBy)</fullMethod>
      <crap>2.06</crap>
      <complexity>2</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingStreamService</className>
      <methodName>createKanbanizeStream</methodName>
      <methodSignature>createKanbanizeStream(Organization $organization, $subject, User $createdBy)</methodSignature>
      <fullMethod>createKanbanizeStream(Organization $organization, $subject, User $createdBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingStreamService</className>
      <methodName>getStream</methodName>
      <methodSignature>getStream($id)</methodSignature>
      <fullMethod>getStream($id)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingStreamService</className>
      <methodName>findStream</methodName>
      <methodSignature>findStream($id)</methodSignature>
      <fullMethod>findStream($id)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingStreamService</className>
      <methodName>findStreams</methodName>
      <methodSignature>findStreams(ReadModelOrganization $organization)</methodSignature>
      <fullMethod>findStreams(ReadModelOrganization $organization)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingTaskService</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(EventStore $eventStore, EntityManager $entityManager)</methodSignature>
      <fullMethod>__construct(EventStore $eventStore, EntityManager $entityManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingTaskService</className>
      <methodName>addTask</methodName>
      <methodSignature>addTask(Task $task)</methodSignature>
      <fullMethod>addTask(Task $task)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingTaskService</className>
      <methodName>getTask</methodName>
      <methodSignature>getTask($id)</methodSignature>
      <fullMethod>getTask($id)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingTaskService</className>
      <methodName>findTasks</methodName>
      <methodSignature>findTasks($organization, $offset, $limit, $filters, $sorting=null)</methodSignature>
      <fullMethod>findTasks($organization, $offset, $limit, $filters, $sorting=null)</fullMethod>
      <crap>210</crap>
      <complexity>14</complexity>
      <coverage>0</coverage>
      <crapLoad>14</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingTaskService</className>
      <methodName>countOrganizationTasks</methodName>
      <methodSignature>countOrganizationTasks(Organization $organization, $filters)</methodSignature>
      <fullMethod>countOrganizationTasks(Organization $organization, $filters)</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingTaskService</className>
      <methodName>findTask</methodName>
      <methodSignature>findTask($id)</methodSignature>
      <fullMethod>findTask($id)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingTaskService</className>
      <methodName>findAcceptedTasksBefore</methodName>
      <methodSignature>findAcceptedTasksBefore(\DateInterval $interval)</methodSignature>
      <fullMethod>findAcceptedTasksBefore(\DateInterval $interval)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingTaskService</className>
      <methodName>findIdeasCreatedBetween</methodName>
      <methodSignature>findIdeasCreatedBetween(\DateInterval $after, \DateInterval $before)</methodSignature>
      <fullMethod>findIdeasCreatedBetween(\DateInterval $after, \DateInterval $before)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingTaskService</className>
      <methodName>findMemberStats</methodName>
      <methodSignature>findMemberStats(Organization $org, $memberId, $filters)</methodSignature>
      <fullMethod>findMemberStats(Organization $org, $memberId, $filters)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingTaskService</className>
      <methodName>findItemsBefore</methodName>
      <methodSignature>findItemsBefore(\DateInterval $interval, $status = null)</methodSignature>
      <fullMethod>findItemsBefore(\DateInterval $interval, $status = null)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingTaskService</className>
      <methodName>countVotesForItem</methodName>
      <methodSignature>countVotesForItem($itemStatus, $id)</methodSignature>
      <fullMethod>countVotesForItem($itemStatus, $id)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingTaskService</className>
      <methodName>getTaskHistory</methodName>
      <methodSignature>getTaskHistory($aggregateId)</methodSignature>
      <fullMethod>getTaskHistory($aggregateId)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(MailServiceInterface $mailService, UserService $userService, TaskService $taskService, OrganizationService $orgService)</methodSignature>
      <fullMethod>__construct(MailServiceInterface $mailService, UserService $userService, TaskService $taskService, OrganizationService $orgService)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>processEstimationAdded</methodName>
      <methodSignature>processEstimationAdded(Event $event)</methodSignature>
      <fullMethod>processEstimationAdded(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>processSharesAssigned</methodName>
      <methodSignature>processSharesAssigned(Event $event)</methodSignature>
      <fullMethod>processSharesAssigned(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>processTaskClosed</methodName>
      <methodSignature>processTaskClosed(Event $event)</methodSignature>
      <fullMethod>processTaskClosed(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>processWorkItemIdeaCreated</methodName>
      <methodSignature>processWorkItemIdeaCreated(Event $event)</methodSignature>
      <fullMethod>processWorkItemIdeaCreated(Event $event)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>processTaskAccepted</methodName>
      <methodSignature>processTaskAccepted(Event $event)</methodSignature>
      <fullMethod>processTaskAccepted(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>processTaskOpened</methodName>
      <methodSignature>processTaskOpened(Event $event)</methodSignature>
      <fullMethod>processTaskOpened(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>processTaskArchived</methodName>
      <methodSignature>processTaskArchived(Event $event)</methodSignature>
      <fullMethod>processTaskArchived(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>sendEstimationAddedInfoMail</methodName>
      <methodSignature>sendEstimationAddedInfoMail(Task $task, User $member)</methodSignature>
      <fullMethod>sendEstimationAddedInfoMail(Task $task, User $member)</fullMethod>
      <crap>3.01</crap>
      <complexity>3</complexity>
      <coverage>88.89</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>sendSharesAssignedInfoMail</methodName>
      <methodSignature>sendSharesAssignedInfoMail(Task $task, User $member)</methodSignature>
      <fullMethod>sendSharesAssignedInfoMail(Task $task, User $member)</fullMethod>
      <crap>3.01</crap>
      <complexity>3</complexity>
      <coverage>88.89</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>remindAssignmentOfShares</methodName>
      <methodSignature>remindAssignmentOfShares(Task $task)</methodSignature>
      <fullMethod>remindAssignmentOfShares(Task $task)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>remindEstimation</methodName>
      <methodSignature>remindEstimation(Task $task)</methodSignature>
      <fullMethod>remindEstimation(Task $task)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>sendTaskClosedInfoMail</methodName>
      <methodSignature>sendTaskClosedInfoMail(Task $task)</methodSignature>
      <fullMethod>sendTaskClosedInfoMail(Task $task)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>sendWorkItemIdeaCreatedMail</methodName>
      <methodSignature>sendWorkItemIdeaCreatedMail(Task $task, $member, $memberships)</methodSignature>
      <fullMethod>sendWorkItemIdeaCreatedMail(Task $task, $member, $memberships)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>sendTaskAcceptedInfoMail</methodName>
      <methodSignature>sendTaskAcceptedInfoMail(Task $task)</methodSignature>
      <fullMethod>sendTaskAcceptedInfoMail(Task $task)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>sendTaskOpenedInfoMail</methodName>
      <methodSignature>sendTaskOpenedInfoMail(Task $task, $memberships)</methodSignature>
      <fullMethod>sendTaskOpenedInfoMail(Task $task, $memberships)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>sendTaskArchivedInfoMail</methodName>
      <methodSignature>sendTaskArchivedInfoMail(Task $task, $memberships)</methodSignature>
      <fullMethod>sendTaskArchivedInfoMail(Task $task, $memberships)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>getMailService</methodName>
      <methodSignature>getMailService()</methodSignature>
      <fullMethod>getMailService()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>getOrganizationService</methodName>
      <methodSignature>getOrganizationService()</methodSignature>
      <fullMethod>getOrganizationService()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListener</className>
      <methodName>setHost</methodName>
      <methodSignature>setHost($host)</methodSignature>
      <fullMethod>setHost($host)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>StreamCommandsListener</className>
      <methodName>onStreamCreated</methodName>
      <methodSignature>onStreamCreated(StreamEvent $event)</methodSignature>
      <fullMethod>onStreamCreated(StreamEvent $event)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>StreamCommandsListener</className>
      <methodName>onStreamUpdated</methodName>
      <methodSignature>onStreamUpdated(StreamEvent $event)</methodSignature>
      <fullMethod>onStreamUpdated(StreamEvent $event)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>StreamCommandsListener</className>
      <methodName>onStreamOrganizationChanged</methodName>
      <methodSignature>onStreamOrganizationChanged(StreamEvent $event)</methodSignature>
      <fullMethod>onStreamOrganizationChanged(StreamEvent $event)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>StreamCommandsListener</className>
      <methodName>getPackage</methodName>
      <methodSignature>getPackage()</methodSignature>
      <fullMethod>getPackage()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($entityManager, $kanbanizeService, $orgService)</methodSignature>
      <fullMethod>__construct($entityManager, $kanbanizeService, $orgService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onTaskCreated</methodName>
      <methodSignature>onTaskCreated(StreamEvent $event)</methodSignature>
      <fullMethod>onTaskCreated(StreamEvent $event)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onTaskUpdated</methodName>
      <methodSignature>onTaskUpdated(StreamEvent $event)</methodSignature>
      <fullMethod>onTaskUpdated(StreamEvent $event)</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onTaskStreamChanged</methodName>
      <methodSignature>onTaskStreamChanged(StreamEvent $event)</methodSignature>
      <fullMethod>onTaskStreamChanged(StreamEvent $event)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onTaskMemberAdded</methodName>
      <methodSignature>onTaskMemberAdded(StreamEvent $event)</methodSignature>
      <fullMethod>onTaskMemberAdded(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onTaskMemberRemoved</methodName>
      <methodSignature>onTaskMemberRemoved(StreamEvent $event)</methodSignature>
      <fullMethod>onTaskMemberRemoved(StreamEvent $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onTaskDeleted</methodName>
      <methodSignature>onTaskDeleted(StreamEvent $event)</methodSignature>
      <fullMethod>onTaskDeleted(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onTaskOpened</methodName>
      <methodSignature>onTaskOpened(StreamEvent $event)</methodSignature>
      <fullMethod>onTaskOpened(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onTaskArchived</methodName>
      <methodSignature>onTaskArchived(StreamEvent $event)</methodSignature>
      <fullMethod>onTaskArchived(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onEstimationAdded</methodName>
      <methodSignature>onEstimationAdded(StreamEvent $event)</methodSignature>
      <fullMethod>onEstimationAdded(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onApprovalCreated</methodName>
      <methodSignature>onApprovalCreated(StreamEvent $event)</methodSignature>
      <fullMethod>onApprovalCreated(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onAcceptanceCreated</methodName>
      <methodSignature>onAcceptanceCreated(StreamEvent $event)</methodSignature>
      <fullMethod>onAcceptanceCreated(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onAcceptancesRemoved</methodName>
      <methodSignature>onAcceptancesRemoved(StreamEvent $event)</methodSignature>
      <fullMethod>onAcceptancesRemoved(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onTaskCompleted</methodName>
      <methodSignature>onTaskCompleted(StreamEvent $event)</methodSignature>
      <fullMethod>onTaskCompleted(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onTaskAccepted</methodName>
      <methodSignature>onTaskAccepted(StreamEvent $event)</methodSignature>
      <fullMethod>onTaskAccepted(StreamEvent $event)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onTaskClosed</methodName>
      <methodSignature>onTaskClosed(StreamEvent $event)</methodSignature>
      <fullMethod>onTaskClosed(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onTaskOngoing</methodName>
      <methodSignature>onTaskOngoing(StreamEvent $event)</methodSignature>
      <fullMethod>onTaskOngoing(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onSharesAssigned</methodName>
      <methodSignature>onSharesAssigned(StreamEvent $event)</methodSignature>
      <fullMethod>onSharesAssigned(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onSharesSkipped</methodName>
      <methodSignature>onSharesSkipped(StreamEvent $event)</methodSignature>
      <fullMethod>onSharesSkipped(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onCreditsAssigned</methodName>
      <methodSignature>onCreditsAssigned(StreamEvent $event)</methodSignature>
      <fullMethod>onCreditsAssigned(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onOwnerAdded</methodName>
      <methodSignature>onOwnerAdded(StreamEvent $event)</methodSignature>
      <fullMethod>onOwnerAdded(StreamEvent $event)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>onOwnerRemoved</methodName>
      <methodSignature>onOwnerRemoved(StreamEvent $event)</methodSignature>
      <fullMethod>onOwnerRemoved(StreamEvent $event)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>getPackage</methodName>
      <methodSignature>getPackage()</methodSignature>
      <fullMethod>getPackage()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TaskCommandsListener</className>
      <methodName>updateOnKanbanize</methodName>
      <methodSignature>updateOnKanbanize($task)</methodSignature>
      <fullMethod>updateOnKanbanize($task)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TransferCreditsListener</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(TaskService $taskService, OrganizationService $organizationService, AccountService $accountService, UserService $userService)</methodSignature>
      <fullMethod>__construct(TaskService $taskService, OrganizationService $organizationService, AccountService $accountService, UserService $userService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TransferCreditsListener</className>
      <methodName>attach</methodName>
      <methodSignature>attach(EventManagerInterface $events)</methodSignature>
      <fullMethod>attach(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TransferCreditsListener</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function(Event $event)</methodSignature>
      <fullMethod>anonymous function(Event $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TransferCreditsListener</className>
      <methodName>detach</methodName>
      <methodSignature>detach(EventManagerInterface $events)</methodSignature>
      <fullMethod>detach(EventManagerInterface $events)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>TransferCreditsListener</className>
      <methodName>execute</methodName>
      <methodSignature>execute(Task $task, User $by, $credits)</methodSignature>
      <fullMethod>execute(Task $task, User $by, $credits)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Stream</className>
      <methodName>create</methodName>
      <methodSignature>create(Organization $organization, $subject, User $createdBy)</methodSignature>
      <fullMethod>create(Organization $organization, $subject, User $createdBy)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Stream</className>
      <methodName>getSubject</methodName>
      <methodSignature>getSubject()</methodSignature>
      <fullMethod>getSubject()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Stream</className>
      <methodName>setSubject</methodName>
      <methodSignature>setSubject($subject, User $createdBy)</methodSignature>
      <fullMethod>setSubject($subject, User $createdBy)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Stream</className>
      <methodName>changeOrganization</methodName>
      <methodSignature>changeOrganization(Organization $organization, User $by)</methodSignature>
      <fullMethod>changeOrganization(Organization $organization, User $by)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Stream</className>
      <methodName>getOrganizationId</methodName>
      <methodSignature>getOrganizationId()</methodSignature>
      <fullMethod>getOrganizationId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Stream</className>
      <methodName>getCreatedAt</methodName>
      <methodSignature>getCreatedAt()</methodSignature>
      <fullMethod>getCreatedAt()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Stream</className>
      <methodName>whenStreamCreated</methodName>
      <methodSignature>whenStreamCreated(StreamCreated $event)</methodSignature>
      <fullMethod>whenStreamCreated(StreamCreated $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Stream</className>
      <methodName>whenStreamUpdated</methodName>
      <methodSignature>whenStreamUpdated(StreamUpdated $event)</methodSignature>
      <fullMethod>whenStreamUpdated(StreamUpdated $event)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Stream</className>
      <methodName>whenStreamOrganizationChanged</methodName>
      <methodSignature>whenStreamOrganizationChanged(StreamOrganizationChanged $event)</methodSignature>
      <fullMethod>whenStreamOrganizationChanged(StreamOrganizationChanged $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Stream</className>
      <methodName>getType</methodName>
      <methodSignature>getType()</methodSignature>
      <fullMethod>getType()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>create</methodName>
      <methodSignature>create(Stream $stream, $subject, BasicUser $createdBy, array $options = null)</methodSignature>
      <fullMethod>create(Stream $stream, $subject, BasicUser $createdBy, array $options = null)</fullMethod>
      <crap>4.03</crap>
      <complexity>4</complexity>
      <coverage>87.5</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>delete</methodName>
      <methodSignature>delete(BasicUser $deletedBy)</methodSignature>
      <fullMethod>delete(BasicUser $deletedBy)</fullMethod>
      <crap>2.01</crap>
      <complexity>2</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>setAttachments</methodName>
      <methodSignature>setAttachments(BasicUser $updatedBy, $jsonData)</methodSignature>
      <fullMethod>setAttachments(BasicUser $updatedBy, $jsonData)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getAttachments</methodName>
      <methodSignature>getAttachments()</methodSignature>
      <fullMethod>getAttachments()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>setLane</methodName>
      <methodSignature>setLane($lane, BasicUser $updatedBy)</methodSignature>
      <fullMethod>setLane($lane, BasicUser $updatedBy)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getLane</methodName>
      <methodSignature>getLane()</methodSignature>
      <fullMethod>getLane()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getStatus</methodName>
      <methodSignature>getStatus()</methodSignature>
      <fullMethod>getStatus()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>execute</methodName>
      <methodSignature>execute(BasicUser $executedBy)</methodSignature>
      <fullMethod>execute(BasicUser $executedBy)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>complete</methodName>
      <methodSignature>complete(BasicUser $completedBy)</methodSignature>
      <fullMethod>complete(BasicUser $completedBy)</fullMethod>
      <crap>3.01</crap>
      <complexity>3</complexity>
      <coverage>90</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>accept</methodName>
      <methodSignature>accept(BasicUser $acceptedBy, \DateInterval $intervalForCloseTask = null)</methodSignature>
      <fullMethod>accept(BasicUser $acceptedBy, \DateInterval $intervalForCloseTask = null)</fullMethod>
      <crap>2.01</crap>
      <complexity>2</complexity>
      <coverage>87.5</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>reopen</methodName>
      <methodSignature>reopen(BasicUser $reopenedBy)</methodSignature>
      <fullMethod>reopen(BasicUser $reopenedBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>close</methodName>
      <methodSignature>close(BasicUser $closedBy)</methodSignature>
      <fullMethod>close(BasicUser $closedBy)</fullMethod>
      <crap>2.02</crap>
      <complexity>2</complexity>
      <coverage>83.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>open</methodName>
      <methodSignature>open(BasicUser $executedBy)</methodSignature>
      <fullMethod>open(BasicUser $executedBy)</fullMethod>
      <crap>2.01</crap>
      <complexity>2</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>archive</methodName>
      <methodSignature>archive(BasicUser $executedBy)</methodSignature>
      <fullMethod>archive(BasicUser $executedBy)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getSubject</methodName>
      <methodSignature>getSubject()</methodSignature>
      <fullMethod>getSubject()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>setSubject</methodName>
      <methodSignature>setSubject($subject, BasicUser $updatedBy)</methodSignature>
      <fullMethod>setSubject($subject, BasicUser $updatedBy)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getDescription</methodName>
      <methodSignature>getDescription()</methodSignature>
      <fullMethod>getDescription()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>setDescription</methodName>
      <methodSignature>setDescription($description, BasicUser $updatedBy)</methodSignature>
      <fullMethod>setDescription($description, BasicUser $updatedBy)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>changeStream</methodName>
      <methodSignature>changeStream(Stream $stream, BasicUser $updatedBy)</methodSignature>
      <fullMethod>changeStream(Stream $stream, BasicUser $updatedBy)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getStreamId</methodName>
      <methodSignature>getStreamId()</methodSignature>
      <fullMethod>getStreamId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getOrganizationId</methodName>
      <methodSignature>getOrganizationId()</methodSignature>
      <fullMethod>getOrganizationId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>addMember</methodName>
      <methodSignature>addMember(User $user, $role = self::ROLE_MEMBER, BasicUser $addedBy = null)</methodSignature>
      <fullMethod>addMember(User $user, $role = self::ROLE_MEMBER, BasicUser $addedBy = null)</fullMethod>
      <crap>5.09</crap>
      <complexity>5</complexity>
      <coverage>84.62</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>removeMember</methodName>
      <methodSignature>removeMember(User $member, BasicUser $removedBy = null)</methodSignature>
      <fullMethod>removeMember(User $member, BasicUser $removedBy = null)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>addEstimation</methodName>
      <methodSignature>addEstimation($value, BasicUser $member)</methodSignature>
      <fullMethod>addEstimation($value, BasicUser $member)</fullMethod>
      <crap>3.01</crap>
      <complexity>3</complexity>
      <coverage>88.89</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>addApproval</methodName>
      <methodSignature>addApproval($vote,BasicUser $member,$description)</methodSignature>
      <fullMethod>addApproval($vote,BasicUser $member,$description)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>addAcceptance</methodName>
      <methodSignature>addAcceptance($vote,BasicUser $member,$description)</methodSignature>
      <fullMethod>addAcceptance($vote,BasicUser $member,$description)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>removeAcceptances</methodName>
      <methodSignature>removeAcceptances(BasicUser $member)</methodSignature>
      <fullMethod>removeAcceptances(BasicUser $member)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>assignShares</methodName>
      <methodSignature>assignShares(array $shares, BasicUser $member)</methodSignature>
      <fullMethod>assignShares(array $shares, BasicUser $member)</fullMethod>
      <crap>8</crap>
      <complexity>8</complexity>
      <coverage>95.45</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>skipShares</methodName>
      <methodSignature>skipShares(BasicUser $member)</methodSignature>
      <fullMethod>skipShares(BasicUser $member)</fullMethod>
      <crap>3.14</crap>
      <complexity>3</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>changeOwner</methodName>
      <methodSignature>changeOwner(BasicUser $new_owner, BasicUser $by)</methodSignature>
      <fullMethod>changeOwner(BasicUser $new_owner, BasicUser $by)</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>removeOwner</methodName>
      <methodSignature>removeOwner(BasicUser $by)</methodSignature>
      <fullMethod>removeOwner(BasicUser $by)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getMembers</methodName>
      <methodSignature>getMembers()</methodSignature>
      <fullMethod>getMembers()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getApprovals</methodName>
      <methodSignature>getApprovals()</methodSignature>
      <fullMethod>getApprovals()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getAcceptances</methodName>
      <methodSignature>getAcceptances()</methodSignature>
      <fullMethod>getAcceptances()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getAverageEstimation</methodName>
      <methodSignature>getAverageEstimation()</methodSignature>
      <fullMethod>getAverageEstimation()</fullMethod>
      <crap>8.86</crap>
      <complexity>8</complexity>
      <coverage>76.19</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>hasMember</methodName>
      <methodSignature>hasMember($user)</methodSignature>
      <fullMethod>hasMember($user)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>hasAs</methodName>
      <methodSignature>hasAs($role, $user)</methodSignature>
      <fullMethod>hasAs($role, $user)</fullMethod>
      <crap>3</crap>
      <complexity>3</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getMembersCredits</methodName>
      <methodSignature>getMembersCredits()</methodSignature>
      <fullMethod>getMembersCredits()</fullMethod>
      <crap>5.51</crap>
      <complexity>5</complexity>
      <coverage>72.73</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>isSharesAssignmentCompleted</methodName>
      <methodSignature>isSharesAssignmentCompleted()</methodSignature>
      <fullMethod>isSharesAssignmentCompleted()</fullMethod>
      <crap>3.07</crap>
      <complexity>3</complexity>
      <coverage>80</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getMemberRole</methodName>
      <methodSignature>getMemberRole($user)</methodSignature>
      <fullMethod>getMemberRole($user)</fullMethod>
      <crap>3.14</crap>
      <complexity>3</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getOwner</methodName>
      <methodSignature>getOwner()</methodSignature>
      <fullMethod>getOwner()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>isDecision</methodName>
      <methodSignature>isDecision()</methodSignature>
      <fullMethod>isDecision()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getType</methodName>
      <methodSignature>getType()</methodSignature>
      <fullMethod>getType()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getCreatedAt</methodName>
      <methodSignature>getCreatedAt()</methodSignature>
      <fullMethod>getCreatedAt()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getMostRecentEditAt</methodName>
      <methodSignature>getMostRecentEditAt()</methodSignature>
      <fullMethod>getMostRecentEditAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getAcceptedAt</methodName>
      <methodSignature>getAcceptedAt()</methodSignature>
      <fullMethod>getAcceptedAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getCreatedBy</methodName>
      <methodSignature>getCreatedBy()</methodSignature>
      <fullMethod>getCreatedBy()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getSharesAssignmentExpiresAt</methodName>
      <methodSignature>getSharesAssignmentExpiresAt()</methodSignature>
      <fullMethod>getSharesAssignmentExpiresAt()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskCreated</methodName>
      <methodSignature>whenTaskCreated(TaskCreated $event)</methodSignature>
      <fullMethod>whenTaskCreated(TaskCreated $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskOngoing</methodName>
      <methodSignature>whenTaskOngoing(TaskOngoing $event)</methodSignature>
      <fullMethod>whenTaskOngoing(TaskOngoing $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskCompleted</methodName>
      <methodSignature>whenTaskCompleted(TaskCompleted $event)</methodSignature>
      <fullMethod>whenTaskCompleted(TaskCompleted $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>anonymous function</methodName>
      <methodSignature>anonymous function(&amp;$value, $key) use ($evaluators)</methodSignature>
      <fullMethod>anonymous function(&amp;$value, $key) use ($evaluators)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskAccepted</methodName>
      <methodSignature>whenTaskAccepted(TaskAccepted $event)</methodSignature>
      <fullMethod>whenTaskAccepted(TaskAccepted $event)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskReopened</methodName>
      <methodSignature>whenTaskReopened(TaskReopened $event)</methodSignature>
      <fullMethod>whenTaskReopened(TaskReopened $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskClosed</methodName>
      <methodSignature>whenTaskClosed(TaskClosed $event)</methodSignature>
      <fullMethod>whenTaskClosed(TaskClosed $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskDeleted</methodName>
      <methodSignature>whenTaskDeleted(TaskDeleted $event)</methodSignature>
      <fullMethod>whenTaskDeleted(TaskDeleted $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskOpened</methodName>
      <methodSignature>whenTaskOpened(TaskOpened $event)</methodSignature>
      <fullMethod>whenTaskOpened(TaskOpened $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskArchived</methodName>
      <methodSignature>whenTaskArchived(TaskArchived $event)</methodSignature>
      <fullMethod>whenTaskArchived(TaskArchived $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskUpdated</methodName>
      <methodSignature>whenTaskUpdated(TaskUpdated $event)</methodSignature>
      <fullMethod>whenTaskUpdated(TaskUpdated $event)</fullMethod>
      <crap>4.07</crap>
      <complexity>4</complexity>
      <coverage>83.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskMemberAdded</methodName>
      <methodSignature>whenTaskMemberAdded(TaskMemberAdded $event)</methodSignature>
      <fullMethod>whenTaskMemberAdded(TaskMemberAdded $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskMemberRemoved</methodName>
      <methodSignature>whenTaskMemberRemoved(TaskMemberRemoved $event)</methodSignature>
      <fullMethod>whenTaskMemberRemoved(TaskMemberRemoved $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskOwnerAdded</methodName>
      <methodSignature>whenTaskOwnerAdded(TaskMemberAdded $event)</methodSignature>
      <fullMethod>whenTaskOwnerAdded(TaskMemberAdded $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskOwnerRemoved</methodName>
      <methodSignature>whenTaskOwnerRemoved(TaskMemberRemoved $event)</methodSignature>
      <fullMethod>whenTaskOwnerRemoved(TaskMemberRemoved $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenOwnerAdded</methodName>
      <methodSignature>whenOwnerAdded(OwnerAdded $event)</methodSignature>
      <fullMethod>whenOwnerAdded(OwnerAdded $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenOwnerRemoved</methodName>
      <methodSignature>whenOwnerRemoved(OwnerRemoved $event)</methodSignature>
      <fullMethod>whenOwnerRemoved(OwnerRemoved $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenTaskStreamChanged</methodName>
      <methodSignature>whenTaskStreamChanged(TaskStreamChanged $event)</methodSignature>
      <fullMethod>whenTaskStreamChanged(TaskStreamChanged $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenEstimationAdded</methodName>
      <methodSignature>whenEstimationAdded(EstimationAdded $event)</methodSignature>
      <fullMethod>whenEstimationAdded(EstimationAdded $event)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenApprovalCreated</methodName>
      <methodSignature>whenApprovalCreated(ApprovalCreated $event)</methodSignature>
      <fullMethod>whenApprovalCreated(ApprovalCreated $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenAcceptanceCreated</methodName>
      <methodSignature>whenAcceptanceCreated(AcceptanceCreated $event)</methodSignature>
      <fullMethod>whenAcceptanceCreated(AcceptanceCreated $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenAcceptancesRemoved</methodName>
      <methodSignature>whenAcceptancesRemoved(AcceptancesRemoved $event)</methodSignature>
      <fullMethod>whenAcceptancesRemoved(AcceptancesRemoved $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenSharesAssigned</methodName>
      <methodSignature>whenSharesAssigned(SharesAssigned $event)</methodSignature>
      <fullMethod>whenSharesAssigned(SharesAssigned $event)</fullMethod>
      <crap>4</crap>
      <complexity>4</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenSharesSkipped</methodName>
      <methodSignature>whenSharesSkipped(SharesSkipped $event)</methodSignature>
      <fullMethod>whenSharesSkipped(SharesSkipped $event)</fullMethod>
      <crap>4.47</crap>
      <complexity>4</complexity>
      <coverage>69.23</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getMembersShare</methodName>
      <methodSignature>getMembersShare()</methodSignature>
      <fullMethod>getMembersShare()</fullMethod>
      <crap>6</crap>
      <complexity>6</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>getResourceId</methodName>
      <methodSignature>getResourceId()</methodSignature>
      <fullMethod>getResourceId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>areSharesAssignedFromMember</methodName>
      <methodSignature>areSharesAssignedFromMember($user)</methodSignature>
      <fullMethod>areSharesAssignedFromMember($user)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>assignCredits</methodName>
      <methodSignature>assignCredits(BasicUser $by)</methodSignature>
      <fullMethod>assignCredits(BasicUser $by)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>whenCreditsAssigned</methodName>
      <methodSignature>whenCreditsAssigned(CreditsAssigned $event)</methodSignature>
      <fullMethod>whenCreditsAssigned(CreditsAssigned $event)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>Task</className>
      <methodName>isSharesAssignmentExpired</methodName>
      <methodSignature>isSharesAssignmentExpired(\DateTime $ref)</methodSignature>
      <fullMethod>isSharesAssignmentExpired(\DateTime $ref)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\View</package>
      <className>TaskJsonModel</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(AbstractController $controller, Organization $organization = null)</methodSignature>
      <fullMethod>__construct(AbstractController $controller, Organization $organization = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\View</package>
      <className>TaskJsonModel</className>
      <methodName>serialize</methodName>
      <methodSignature>serialize()</methodSignature>
      <fullMethod>serialize()</fullMethod>
      <crap>5.25</crap>
      <complexity>5</complexity>
      <coverage>78.57</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\View</package>
      <className>TaskJsonModel</className>
      <methodName>serializeOne</methodName>
      <methodSignature>serializeOne(TaskInterface $task)</methodSignature>
      <fullMethod>serializeOne(TaskInterface $task)</fullMethod>
      <crap>57.01</crap>
      <complexity>22</complexity>
      <coverage>58.33</coverage>
      <crapLoad>10</crapLoad>
    </method>
    <method>
      <package>TaskManagement\View</package>
      <className>TaskJsonModel</className>
      <methodName>getStream</methodName>
      <methodSignature>getStream(TaskInterface $task)</methodSignature>
      <fullMethod>getStream(TaskInterface $task)</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\View</package>
      <className>TaskJsonModel</className>
      <methodName>getOrganization</methodName>
      <methodSignature>getOrganization(TaskInterface $task)</methodSignature>
      <fullMethod>getOrganization(TaskInterface $task)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\View</package>
      <className>TaskJsonModel</className>
      <methodName>serializeOneMember</methodName>
      <methodSignature>serializeOneMember($tm)</methodSignature>
      <fullMethod>serializeOneMember($tm)</fullMethod>
      <crap>32.99</crap>
      <complexity>12</complexity>
      <coverage>47.37</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>TaskManagement\View</package>
      <className>TaskJsonModel</className>
      <methodName>serializeOneMemberApproval</methodName>
      <methodSignature>serializeOneMemberApproval($approval)</methodSignature>
      <fullMethod>serializeOneMemberApproval($approval)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\View</package>
      <className>TaskJsonModel</className>
      <methodName>serializeOneMemberAcceptance</methodName>
      <methodSignature>serializeOneMemberAcceptance($acceptance)</methodSignature>
      <fullMethod>serializeOneMemberAcceptance($acceptance)</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>ConsoleRemindersProcessTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>ConsoleRemindersProcessTest</className>
      <methodName>cleanEmailMessages</methodName>
      <methodSignature>cleanEmailMessages()</methodSignature>
      <fullMethod>cleanEmailMessages()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>ConsoleRemindersProcessTest</className>
      <methodName>getEmailMessages</methodName>
      <methodSignature>getEmailMessages()</methodSignature>
      <fullMethod>getEmailMessages()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>ConsoleRemindersProcessTest</className>
      <methodName>assertEmailHtmlContains</methodName>
      <methodSignature>assertEmailHtmlContains($needle, $email, $description = '')</methodSignature>
      <fullMethod>assertEmailHtmlContains($needle, $email, $description = '')</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>ConsoleRemindersProcessTest</className>
      <methodName>testSendNotificationToUserWhoDidntVote</methodName>
      <methodSignature>testSendNotificationToUserWhoDidntVote()</methodSignature>
      <fullMethod>testSendNotificationToUserWhoDidntVote()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>LastSharesAssignmentProcessTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>LastSharesAssignmentProcessTest</className>
      <methodName>testAssignSharesAsLast</methodName>
      <methodSignature>testAssignSharesAsLast()</methodSignature>
      <fullMethod>testAssignSharesAsLast()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>LastSharesAssignmentProcessTest</className>
      <methodName>testSkipSharesAsLast</methodName>
      <methodSignature>testSkipSharesAsLast()</methodSignature>
      <fullMethod>testSkipSharesAsLast()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>MailNotificationProcessTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>MailNotificationProcessTest</className>
      <methodName>testEstimationAddedNotification</methodName>
      <methodSignature>testEstimationAddedNotification()</methodSignature>
      <fullMethod>testEstimationAddedNotification()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>MailNotificationProcessTest</className>
      <methodName>testSharesAssignedNotification</methodName>
      <methodSignature>testSharesAssignedNotification()</methodSignature>
      <fullMethod>testSharesAssignedNotification()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>MailNotificationProcessTest</className>
      <methodName>testTaskClosedNotification</methodName>
      <methodSignature>testTaskClosedNotification()</methodSignature>
      <fullMethod>testTaskClosedNotification()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>MailNotificationProcessTest</className>
      <methodName>testTaskAcceptedNotification</methodName>
      <methodSignature>testTaskAcceptedNotification()</methodSignature>
      <fullMethod>testTaskAcceptedNotification()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>MailNotificationProcessTest</className>
      <methodName>cleanEmailMessages</methodName>
      <methodSignature>cleanEmailMessages()</methodSignature>
      <fullMethod>cleanEmailMessages()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>MailNotificationProcessTest</className>
      <methodName>getEmailMessages</methodName>
      <methodSignature>getEmailMessages()</methodSignature>
      <fullMethod>getEmailMessages()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>MailNotificationProcessTest</className>
      <methodName>getLastEmailMessage</methodName>
      <methodSignature>getLastEmailMessage()</methodSignature>
      <fullMethod>getLastEmailMessage()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>MailNotificationProcessTest</className>
      <methodName>assertEmailHtmlContains</methodName>
      <methodSignature>assertEmailHtmlContains($needle, $email, $description = '')</methodSignature>
      <fullMethod>assertEmailHtmlContains($needle, $email, $description = '')</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AddEstimationRemindersControllerTest</className>
      <methodName>setupMore</methodName>
      <methodSignature>setupMore()</methodSignature>
      <fullMethod>setupMore()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AddEstimationRemindersControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AddEstimationRemindersControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AddEstimationRemindersControllerTest</className>
      <methodName>testSendReminderAsAnonymous</methodName>
      <methodSignature>testSendReminderAsAnonymous()</methodSignature>
      <fullMethod>testSendReminderAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AddEstimationRemindersControllerTest</className>
      <methodName>testCreateWithoutReminderType</methodName>
      <methodSignature>testCreateWithoutReminderType()</methodSignature>
      <fullMethod>testCreateWithoutReminderType()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AddEstimationRemindersControllerTest</className>
      <methodName>testCreateWithWrongReminderType</methodName>
      <methodSignature>testCreateWithWrongReminderType()</methodSignature>
      <fullMethod>testCreateWithWrongReminderType()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AddEstimationRemindersControllerTest</className>
      <methodName>testSendReminderNoTask</methodName>
      <methodSignature>testSendReminderNoTask()</methodSignature>
      <fullMethod>testSendReminderNoTask()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AddEstimationRemindersControllerTest</className>
      <methodName>testSendReminderNotExistingTask</methodName>
      <methodSignature>testSendReminderNotExistingTask()</methodSignature>
      <fullMethod>testSendReminderNotExistingTask()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AddEstimationRemindersControllerTest</className>
      <methodName>testSendReminder</methodName>
      <methodSignature>testSendReminder()</methodSignature>
      <fullMethod>testSendReminder()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AssignmentOfSharesRemindersControllerTest</className>
      <methodName>setupMore</methodName>
      <methodSignature>setupMore()</methodSignature>
      <fullMethod>setupMore()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AssignmentOfSharesRemindersControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AssignmentOfSharesRemindersControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AssignmentOfSharesRemindersControllerTest</className>
      <methodName>testCreateAsAnonymous</methodName>
      <methodSignature>testCreateAsAnonymous()</methodSignature>
      <fullMethod>testCreateAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AssignmentOfSharesRemindersControllerTest</className>
      <methodName>testCreateAsSystemUser</methodName>
      <methodSignature>testCreateAsSystemUser()</methodSignature>
      <fullMethod>testCreateAsSystemUser()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AssignmentOfSharesRemindersControllerTest</className>
      <methodName>testCreateANonExistentReminder</methodName>
      <methodSignature>testCreateANonExistentReminder()</methodSignature>
      <fullMethod>testCreateANonExistentReminder()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>AssignmentOfSharesRemindersControllerTest</className>
      <methodName>testCreateWithoutReminderType</methodName>
      <methodSignature>testCreateWithoutReminderType()</methodSignature>
      <fullMethod>testCreateWithoutReminderType()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MemberStatsControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MemberStatsControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MemberStatsControllerTest</className>
      <methodName>testGetAsAnonymous</methodName>
      <methodSignature>testGetAsAnonymous()</methodSignature>
      <fullMethod>testGetAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MemberStatsControllerTest</className>
      <methodName>testGetAsUnauthorizedUser</methodName>
      <methodSignature>testGetAsUnauthorizedUser()</methodSignature>
      <fullMethod>testGetAsUnauthorizedUser()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MemberStatsControllerTest</className>
      <methodName>testGetANotExistingMember</methodName>
      <methodSignature>testGetANotExistingMember()</methodSignature>
      <fullMethod>testGetANotExistingMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>MemberStatsControllerTest</className>
      <methodName>testGetUserTaskMetrics</methodName>
      <methodSignature>testGetUserTaskMetrics()</methodSignature>
      <fullMethod>testGetUserTaskMetrics()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>testAssignSharesAsAnonymous</methodName>
      <methodSignature>testAssignSharesAsAnonymous()</methodSignature>
      <fullMethod>testAssignSharesAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>testAssignShares</methodName>
      <methodSignature>testAssignShares()</methodSignature>
      <fullMethod>testAssignShares()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>testSkipAssignShares</methodName>
      <methodSignature>testSkipAssignShares()</methodSignature>
      <fullMethod>testSkipAssignShares()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>testAssignSharesWithMoreThan100Share</methodName>
      <methodSignature>testAssignSharesWithMoreThan100Share()</methodSignature>
      <fullMethod>testAssignSharesWithMoreThan100Share()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>testAssignSharesWithLessThan0Share</methodName>
      <methodSignature>testAssignSharesWithLessThan0Share()</methodSignature>
      <fullMethod>testAssignSharesWithLessThan0Share()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>testAssignSharesWithMoreThan100TotalShares</methodName>
      <methodSignature>testAssignSharesWithMoreThan100TotalShares()</methodSignature>
      <fullMethod>testAssignSharesWithMoreThan100TotalShares()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>testAssignSharesWithUnexistingTask</methodName>
      <methodSignature>testAssignSharesWithUnexistingTask()</methodSignature>
      <fullMethod>testAssignSharesWithUnexistingTask()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>testAssignSharesWithMissingMember</methodName>
      <methodSignature>testAssignSharesWithMissingMember()</methodSignature>
      <fullMethod>testAssignSharesWithMissingMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>testAssignSharesByNonMember</methodName>
      <methodSignature>testAssignSharesByNonMember()</methodSignature>
      <fullMethod>testAssignSharesByNonMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>testAssignSharesToACompletedTask</methodName>
      <methodSignature>testAssignSharesToACompletedTask()</methodSignature>
      <fullMethod>testAssignSharesToACompletedTask()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>testAssignSharesToANonMembers</methodName>
      <methodSignature>testAssignSharesToANonMembers()</methodSignature>
      <fullMethod>testAssignSharesToANonMembers()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>SharesControllerTest</className>
      <methodName>testAssignSharesToANonMembersExtraShares</methodName>
      <methodSignature>testAssignSharesToANonMembersExtraShares()</methodSignature>
      <fullMethod>testAssignSharesToANonMembersExtraShares()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsControllerTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsControllerTest</className>
      <methodName>testCreateStream</methodName>
      <methodSignature>testCreateStream()</methodSignature>
      <fullMethod>testCreateStream()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsControllerTest</className>
      <methodName>testCreateStreamWithHtmlTagsInSubject</methodName>
      <methodSignature>testCreateStreamWithHtmlTagsInSubject()</methodSignature>
      <fullMethod>testCreateStreamWithHtmlTagsInSubject()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsControllerTest</className>
      <methodName>testCreateStreamInNotExistingOrganization</methodName>
      <methodSignature>testCreateStreamInNotExistingOrganization()</methodSignature>
      <fullMethod>testCreateStreamInNotExistingOrganization()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsControllerTest</className>
      <methodName>testCreateStreamWithoutOrganization</methodName>
      <methodSignature>testCreateStreamWithoutOrganization()</methodSignature>
      <fullMethod>testCreateStreamWithoutOrganization()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsControllerTest</className>
      <methodName>testCreateStreamAsAnonymous</methodName>
      <methodSignature>testCreateStreamAsAnonymous()</methodSignature>
      <fullMethod>testCreateStreamAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsControllerTest</className>
      <methodName>testGetList</methodName>
      <methodSignature>testGetList()</methodSignature>
      <fullMethod>testGetList()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsControllerTest</className>
      <methodName>testGetEmptyList</methodName>
      <methodSignature>testGetEmptyList()</methodSignature>
      <fullMethod>testGetEmptyList()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>StreamsControllerTest</className>
      <methodName>getLoggedUser</methodName>
      <methodSignature>getLoggedUser()</methodSignature>
      <fullMethod>getLoggedUser()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>setupMore</methodName>
      <methodSignature>setupMore()</methodSignature>
      <fullMethod>setupMore()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetEmptyListFromAStream</methodName>
      <methodSignature>testGetEmptyListFromAStream()</methodSignature>
      <fullMethod>testGetEmptyListFromAStream()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetListFromPopulatedStream</methodName>
      <methodSignature>testGetListFromPopulatedStream()</methodSignature>
      <fullMethod>testGetListFromPopulatedStream()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetListAsAnonymous</methodName>
      <methodSignature>testGetListAsAnonymous()</methodSignature>
      <fullMethod>testGetListAsAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetListWithoutOrganizationId</methodName>
      <methodSignature>testGetListWithoutOrganizationId()</methodSignature>
      <fullMethod>testGetListWithoutOrganizationId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetListWithNotExistingOrganizationId</methodName>
      <methodSignature>testGetListWithNotExistingOrganizationId()</methodSignature>
      <fullMethod>testGetListWithNotExistingOrganizationId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetListWithNotAllowedOrganizationId</methodName>
      <methodSignature>testGetListWithNotAllowedOrganizationId()</methodSignature>
      <fullMethod>testGetListWithNotAllowedOrganizationId()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetEmptyList</methodName>
      <methodSignature>testGetEmptyList()</methodSignature>
      <fullMethod>testGetEmptyList()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetList</methodName>
      <methodSignature>testGetList()</methodSignature>
      <fullMethod>testGetList()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetListWithPagination</methodName>
      <methodSignature>testGetListWithPagination()</methodSignature>
      <fullMethod>testGetListWithPagination()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetListWithDateInterval</methodName>
      <methodSignature>testGetListWithDateInterval()</methodSignature>
      <fullMethod>testGetListWithDateInterval()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetEmptyListWithWrongFilter</methodName>
      <methodSignature>testGetEmptyListWithWrongFilter()</methodSignature>
      <fullMethod>testGetEmptyListWithWrongFilter()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetEmptyListWithFiltering</methodName>
      <methodSignature>testGetEmptyListWithFiltering()</methodSignature>
      <fullMethod>testGetEmptyListWithFiltering()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testGetListWithFiltering</methodName>
      <methodSignature>testGetListWithFiltering()</methodSignature>
      <fullMethod>testGetListWithFiltering()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>TasksControllerTest</className>
      <methodName>testSuccessfullyDeleteTask</methodName>
      <methodSignature>testSuccessfullyDeleteTask()</methodSignature>
      <fullMethod>testSuccessfullyDeleteTask()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>VotingResultsControllerTest</className>
      <methodName>setupMore</methodName>
      <methodSignature>setupMore()</methodSignature>
      <fullMethod>setupMore()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>VotingResultsControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>VotingResultsControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Controller</package>
      <className>VotingResultsControllerTest</className>
      <methodName>testTimeboxedCompletedWorkItemApproval</methodName>
      <methodSignature>testTimeboxedCompletedWorkItemApproval()</methodSignature>
      <fullMethod>testTimeboxedCompletedWorkItemApproval()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>JsonPropertiesTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>JsonPropertiesTest</className>
      <methodName>getJsonProperties</methodName>
      <methodSignature>getJsonProperties()</methodSignature>
      <fullMethod>getJsonProperties()</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>JsonPropertiesTest</className>
      <methodName>testParseJson</methodName>
      <methodSignature>testParseJson()</methodSignature>
      <fullMethod>testParseJson()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingStreamServiceTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>EventSourcingStreamServiceTest</className>
      <methodName>testCreate</methodName>
      <methodSignature>testCreate()</methodSignature>
      <fullMethod>testCreate()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListenerTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListenerTest</className>
      <methodName>testSendEstimationAddedInfoMail</methodName>
      <methodSignature>testSendEstimationAddedInfoMail()</methodSignature>
      <fullMethod>testSendEstimationAddedInfoMail()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListenerTest</className>
      <methodName>testSendSharesAssignedInfoMail</methodName>
      <methodSignature>testSendSharesAssignedInfoMail()</methodSignature>
      <fullMethod>testSendSharesAssignedInfoMail()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListenerTest</className>
      <methodName>testRemindAssignmentOfShares</methodName>
      <methodSignature>testRemindAssignmentOfShares()</methodSignature>
      <fullMethod>testRemindAssignmentOfShares()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListenerTest</className>
      <methodName>testRemindEstimation</methodName>
      <methodSignature>testRemindEstimation()</methodSignature>
      <fullMethod>testRemindEstimation()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListenerTest</className>
      <methodName>testSendTaskClosedInfoMail</methodName>
      <methodSignature>testSendTaskClosedInfoMail()</methodSignature>
      <fullMethod>testSendTaskClosedInfoMail()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement\Service</package>
      <className>NotifyMailListenerTest</className>
      <methodName>testSendWorkItemIdeaCreatedMail</methodName>
      <methodSignature>testSendWorkItemIdeaCreatedMail()</methodSignature>
      <fullMethod>testSendWorkItemIdeaCreatedMail()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>StreamTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>StreamTest</className>
      <methodName>testCreate</methodName>
      <methodSignature>testCreate()</methodSignature>
      <fullMethod>testCreate()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>StreamTest</className>
      <methodName>testCreateWithNoSubject</methodName>
      <methodSignature>testCreateWithNoSubject()</methodSignature>
      <fullMethod>testCreateWithNoSubject()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>StreamTest</className>
      <methodName>testSetSubject</methodName>
      <methodSignature>testSetSubject()</methodSignature>
      <fullMethod>testSetSubject()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>StreamTest</className>
      <methodName>testChangeOrganization</methodName>
      <methodSignature>testChangeOrganization()</methodSignature>
      <fullMethod>testChangeOrganization()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskAssignShareTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskAssignShareTest</className>
      <methodName>testAssignShare</methodName>
      <methodSignature>testAssignShare()</methodSignature>
      <fullMethod>testAssignShare()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskAssignShareTest</className>
      <methodName>testEveryMemberAssignShares</methodName>
      <methodSignature>testEveryMemberAssignShares()</methodSignature>
      <fullMethod>testEveryMemberAssignShares()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskAssignShareTest</className>
      <methodName>testEveryMemberAssign0SharesToAMember</methodName>
      <methodSignature>testEveryMemberAssign0SharesToAMember()</methodSignature>
      <fullMethod>testEveryMemberAssign0SharesToAMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskAssignShareTest</className>
      <methodName>testEveryMemberAssignSharesWith0</methodName>
      <methodSignature>testEveryMemberAssignSharesWith0()</methodSignature>
      <fullMethod>testEveryMemberAssignSharesWith0()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskAssignShareTest</className>
      <methodName>testOneMemberSkipSharesAssignment</methodName>
      <methodSignature>testOneMemberSkipSharesAssignment()</methodSignature>
      <fullMethod>testOneMemberSkipSharesAssignment()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskAssignShareTest</className>
      <methodName>testAllMembersSkipSharesAssignment</methodName>
      <methodSignature>testAllMembersSkipSharesAssignment()</methodSignature>
      <fullMethod>testAllMembersSkipSharesAssignment()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskAssignShareTest</className>
      <methodName>testLastUserShareAssignement</methodName>
      <methodSignature>testLastUserShareAssignement()</methodSignature>
      <fullMethod>testLastUserShareAssignement()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskAssignShareTest</className>
      <methodName>testGetMembersCreditsWhenEverybodySkip</methodName>
      <methodSignature>testGetMembersCreditsWhenEverybodySkip()</methodSignature>
      <fullMethod>testGetMembersCreditsWhenEverybodySkip()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testCreate</methodName>
      <methodSignature>testCreate()</methodSignature>
      <fullMethod>testCreate()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testCreateWithNoSubject</methodName>
      <methodSignature>testCreateWithNoSubject()</methodSignature>
      <fullMethod>testCreateWithNoSubject()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testCreateWorkItemIdea</methodName>
      <methodSignature>testCreateWorkItemIdea()</methodSignature>
      <fullMethod>testCreateWorkItemIdea()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testDeleteOngoingTask</methodName>
      <methodSignature>testDeleteOngoingTask()</methodSignature>
      <fullMethod>testDeleteOngoingTask()</fullMethod>
      <crap>1.01</crap>
      <complexity>1</complexity>
      <coverage>80</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testDeleteCompletedTask</methodName>
      <methodSignature>testDeleteCompletedTask()</methodSignature>
      <fullMethod>testDeleteCompletedTask()</fullMethod>
      <crap>1.06</crap>
      <complexity>1</complexity>
      <coverage>60</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testAddMember</methodName>
      <methodSignature>testAddMember()</methodSignature>
      <fullMethod>testAddMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testAddMembers</methodName>
      <methodSignature>testAddMembers()</methodSignature>
      <fullMethod>testAddMembers()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testAddAdmin</methodName>
      <methodSignature>testAddAdmin()</methodSignature>
      <fullMethod>testAddAdmin()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testAddMemberNotInOrganization</methodName>
      <methodSignature>testAddMemberNotInOrganization()</methodSignature>
      <fullMethod>testAddMemberNotInOrganization()</fullMethod>
      <crap>1.02</crap>
      <complexity>1</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testHasMember</methodName>
      <methodSignature>testHasMember()</methodSignature>
      <fullMethod>testHasMember()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testHasAs</methodName>
      <methodSignature>testHasAs()</methodSignature>
      <fullMethod>testHasAs()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testAddEstimation</methodName>
      <methodSignature>testAddEstimation()</methodSignature>
      <fullMethod>testAddEstimation()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testClose</methodName>
      <methodSignature>testClose()</methodSignature>
      <fullMethod>testClose()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testCompleteWithNoEstimation</methodName>
      <methodSignature>testCompleteWithNoEstimation()</methodSignature>
      <fullMethod>testCompleteWithNoEstimation()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>85.71</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testCompleteWithOneEstimation</methodName>
      <methodSignature>testCompleteWithOneEstimation()</methodSignature>
      <fullMethod>testCompleteWithOneEstimation()</fullMethod>
      <crap>1.02</crap>
      <complexity>1</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testCompleteWithThreeEstimation</methodName>
      <methodSignature>testCompleteWithThreeEstimation()</methodSignature>
      <fullMethod>testCompleteWithThreeEstimation()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>TaskManagement</package>
      <className>TaskTest</className>
      <methodName>testExecuteIdeaItem</methodName>
      <methodSignature>testExecuteIdeaItem()</methodSignature>
      <fullMethod>testExecuteIdeaItem()</fullMethod>
      <crap>1.02</crap>
      <complexity>1</complexity>
      <coverage>75</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX</package>
      <className>Module</className>
      <methodName>getAutoloaderConfig</methodName>
      <methodSignature>getAutoloaderConfig()</methodSignature>
      <fullMethod>getAutoloaderConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Acl\Controller\Plugin</package>
      <className>IsAllowed</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(Acl $acl)</methodSignature>
      <fullMethod>__construct(Acl $acl)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Acl\Controller\Plugin</package>
      <className>IsAllowed</className>
      <methodName>__invoke</methodName>
      <methodSignature>__invoke($user, $resource, $privilege = null)</methodSignature>
      <fullMethod>__invoke($user, $resource, $privilege = null)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>DomainAdapter</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($hostname, UserService $userService)</methodSignature>
      <fullMethod>__construct($hostname, UserService $userService)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>DomainAdapter</className>
      <methodName>authenticate</methodName>
      <methodSignature>authenticate()</methodSignature>
      <fullMethod>authenticate()</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>DomainAdapter</className>
      <methodName>findUserIdFromHostname</methodName>
      <methodSignature>findUserIdFromHostname($hostname)</methodSignature>
      <fullMethod>findUserIdFromHostname($hostname)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>GoogleJWTAdapter</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(\Google_Client $client)</methodSignature>
      <fullMethod>__construct(\Google_Client $client)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>GoogleJWTAdapter</className>
      <methodName>setToken</methodName>
      <methodSignature>setToken($token)</methodSignature>
      <fullMethod>setToken($token)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>GoogleJWTAdapter</className>
      <methodName>authenticate</methodName>
      <methodSignature>authenticate()</methodSignature>
      <fullMethod>authenticate()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>GoogleJWTAdapter</className>
      <methodName>setEventManager</methodName>
      <methodSignature>setEventManager(EventManagerInterface $eventManager)</methodSignature>
      <fullMethod>setEventManager(EventManagerInterface $eventManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>GoogleJWTAdapter</className>
      <methodName>getEventManager</methodName>
      <methodSignature>getEventManager()</methodSignature>
      <fullMethod>getEventManager()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTAdapter</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($publicKey)</methodSignature>
      <fullMethod>__construct($publicKey)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTAdapter</className>
      <methodName>setToken</methodName>
      <methodSignature>setToken($token)</methodSignature>
      <fullMethod>setToken($token)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTAdapter</className>
      <methodName>authenticate</methodName>
      <methodSignature>authenticate()</methodSignature>
      <fullMethod>authenticate()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTAdapter</className>
      <methodName>setEventManager</methodName>
      <methodSignature>setEventManager(EventManagerInterface $eventManager)</methodSignature>
      <fullMethod>setEventManager(EventManagerInterface $eventManager)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTAdapter</className>
      <methodName>getEventManager</methodName>
      <methodSignature>getEventManager()</methodSignature>
      <fullMethod>getEventManager()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTAdapter</className>
      <methodName>setAlgorithm</methodName>
      <methodSignature>setAlgorithm($algorithm)</methodSignature>
      <fullMethod>setAlgorithm($algorithm)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTAdapter</className>
      <methodName>getAlgorithm</methodName>
      <methodSignature>getAlgorithm()</methodSignature>
      <fullMethod>getAlgorithm()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTBuilder</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct($privateKey)</methodSignature>
      <fullMethod>__construct($privateKey)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTBuilder</className>
      <methodName>buildJWT</methodName>
      <methodSignature>buildJWT(User $identity)</methodSignature>
      <fullMethod>buildJWT(User $identity)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTBuilder</className>
      <methodName>setTimeToLive</methodName>
      <methodSignature>setTimeToLive($timeToLive)</methodSignature>
      <fullMethod>setTimeToLive($timeToLive)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTBuilder</className>
      <methodName>setAlgorithm</methodName>
      <methodSignature>setAlgorithm($algorithm)</methodSignature>
      <fullMethod>setAlgorithm($algorithm)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTBuilder</className>
      <methodName>getTimeToLive</methodName>
      <methodSignature>getTimeToLive()</methodSignature>
      <fullMethod>getTimeToLive()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTBuilder</className>
      <methodName>getAlgorithm</methodName>
      <methodSignature>getAlgorithm()</methodSignature>
      <fullMethod>getAlgorithm()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTBuilder</className>
      <methodName>getPrivateKey</methodName>
      <methodSignature>getPrivateKey()</methodSignature>
      <fullMethod>getPrivateKey()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\EventStore\Controller\Plugin</package>
      <className>EventStoreTransactionPlugin</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(EventStore $transactionManager)</methodSignature>
      <fullMethod>__construct(EventStore $transactionManager)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\EventStore\Controller\Plugin</package>
      <className>EventStoreTransactionPlugin</className>
      <methodName>begin</methodName>
      <methodSignature>begin()</methodSignature>
      <fullMethod>begin()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\EventStore\Controller\Plugin</package>
      <className>EventStoreTransactionPlugin</className>
      <methodName>rollback</methodName>
      <methodSignature>rollback()</methodSignature>
      <fullMethod>rollback()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\EventStore\Controller\Plugin</package>
      <className>EventStoreTransactionPlugin</className>
      <methodName>commit</methodName>
      <methodSignature>commit()</methodSignature>
      <fullMethod>commit()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Rest\Controller</package>
      <className>HATEOASRestfulController</className>
      <methodName>options</methodName>
      <methodSignature>options()</methodSignature>
      <fullMethod>options()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Rest\Controller</package>
      <className>HATEOASRestfulController</className>
      <methodName>checkOptions</methodName>
      <methodSignature>checkOptions(MvcEvent $e)</methodSignature>
      <fullMethod>checkOptions(MvcEvent $e)</fullMethod>
      <crap>5.73</crap>
      <complexity>5</complexity>
      <coverage>69.23</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Rest\Controller</package>
      <className>HATEOASRestfulController</className>
      <methodName>setEventManager</methodName>
      <methodSignature>setEventManager(EventManagerInterface $events)</methodSignature>
      <fullMethod>setEventManager(EventManagerInterface $events)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Rest\Controller</package>
      <className>HATEOASRestfulController</className>
      <methodName>onDispatch</methodName>
      <methodSignature>onDispatch(MvcEvent $e)</methodSignature>
      <fullMethod>onDispatch(MvcEvent $e)</fullMethod>
      <crap>5</crap>
      <complexity>5</complexity>
      <coverage>94.44</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Rest\Controller</package>
      <className>HATEOASRestfulController</className>
      <methodName>invoke</methodName>
      <methodSignature>invoke($id, $data)</methodSignature>
      <fullMethod>invoke($id, $data)</fullMethod>
      <crap>1.3</crap>
      <complexity>1</complexity>
      <coverage>33.33</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Rest\Controller</package>
      <className>HATEOASRestfulController</className>
      <methodName>processPostWithIdData</methodName>
      <methodSignature>processPostWithIdData($id, Request $request)</methodSignature>
      <fullMethod>processPostWithIdData($id, Request $request)</fullMethod>
      <crap>2.26</crap>
      <complexity>2</complexity>
      <coverage>60</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Rest\Controller</package>
      <className>HATEOASRestfulController</className>
      <methodName>getCollectionOptions</methodName>
      <methodSignature>getCollectionOptions()</methodSignature>
      <fullMethod>getCollectionOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Rest\Controller</package>
      <className>HATEOASRestfulController</className>
      <methodName>getResourceOptions</methodName>
      <methodSignature>getResourceOptions()</methodSignature>
      <fullMethod>getResourceOptions()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Authentication</package>
      <className>AdapterMock</className>
      <methodName>setEmail</methodName>
      <methodSignature>setEmail($email)</methodSignature>
      <fullMethod>setEmail($email)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Authentication</package>
      <className>AdapterMock</className>
      <methodName>getEmail</methodName>
      <methodSignature>getEmail()</methodSignature>
      <fullMethod>getEmail()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Authentication</package>
      <className>AdapterMock</className>
      <methodName>setFirstname</methodName>
      <methodSignature>setFirstname($firstname)</methodSignature>
      <fullMethod>setFirstname($firstname)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Authentication</package>
      <className>AdapterMock</className>
      <methodName>setLastname</methodName>
      <methodSignature>setLastname($lastname)</methodSignature>
      <fullMethod>setLastname($lastname)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Authentication</package>
      <className>AdapterMock</className>
      <methodName>authenticate</methodName>
      <methodSignature>authenticate()</methodSignature>
      <fullMethod>authenticate()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Authentication</package>
      <className>AdapterMock</className>
      <methodName>setEventManager</methodName>
      <methodSignature>setEventManager(EventManagerInterface $events)</methodSignature>
      <fullMethod>setEventManager(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Authentication</package>
      <className>AdapterMock</className>
      <methodName>getEventManager</methodName>
      <methodSignature>getEventManager()</methodSignature>
      <fullMethod>getEventManager()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>AuthenticationServiceMock</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct(User $user = null)</methodSignature>
      <fullMethod>__construct(User $user = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>AuthenticationServiceMock</className>
      <methodName>authenticate</methodName>
      <methodSignature>authenticate()</methodSignature>
      <fullMethod>authenticate()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>AuthenticationServiceMock</className>
      <methodName>getIdentity</methodName>
      <methodSignature>getIdentity()</methodSignature>
      <fullMethod>getIdentity()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>AuthenticationServiceMock</className>
      <methodName>hasIdentity</methodName>
      <methodSignature>hasIdentity()</methodSignature>
      <fullMethod>hasIdentity()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>AuthenticationServiceMock</className>
      <methodName>clearIdentity</methodName>
      <methodSignature>clearIdentity()</methodSignature>
      <fullMethod>clearIdentity()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>AuthenticationServiceMock</className>
      <methodName>setIdentity</methodName>
      <methodSignature>setIdentity(User $user = null)</methodSignature>
      <fullMethod>setIdentity(User $user = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Controller</package>
      <className>ControllerTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>2</crap>
      <complexity>2</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Controller</package>
      <className>ControllerTest</className>
      <methodName>setupController</methodName>
      <methodSignature>setupController()</methodSignature>
      <fullMethod>setupController()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Controller</package>
      <className>ControllerTest</className>
      <methodName>setupRouteMatch</methodName>
      <methodSignature>setupRouteMatch()</methodSignature>
      <fullMethod>setupRouteMatch()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Controller</package>
      <className>ControllerTest</className>
      <methodName>setupMore</methodName>
      <methodSignature>setupMore()</methodSignature>
      <fullMethod>setupMore()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Controller</package>
      <className>ControllerTest</className>
      <methodName>setupAnonymous</methodName>
      <methodSignature>setupAnonymous()</methodSignature>
      <fullMethod>setupAnonymous()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Controller</package>
      <className>ControllerTest</className>
      <methodName>setupLoggedUser</methodName>
      <methodSignature>setupLoggedUser(User $user)</methodSignature>
      <fullMethod>setupLoggedUser(User $user)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Test\Controller</package>
      <className>ControllerTest</className>
      <methodName>getLoggedUser</methodName>
      <methodSignature>getLoggedUser()</methodSignature>
      <fullMethod>getLoggedUser()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTAdapterTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTAdapterTest</className>
      <methodName>testAuthenticate</methodName>
      <methodSignature>testAuthenticate()</methodSignature>
      <fullMethod>testAuthenticate()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTAdapterTest</className>
      <methodName>testAuthenticateWithExpiredToken</methodName>
      <methodSignature>testAuthenticateWithExpiredToken()</methodSignature>
      <fullMethod>testAuthenticateWithExpiredToken()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTAdapterTest</className>
      <methodName>testAuthenticateWithNotExistingIdentity</methodName>
      <methodSignature>testAuthenticateWithNotExistingIdentity()</methodSignature>
      <fullMethod>testAuthenticateWithNotExistingIdentity()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZFX\Authentication</package>
      <className>JWTAdapterTest</className>
      <methodName>testParseCorruptedToken</methodName>
      <methodSignature>testParseCorruptedToken()</methodSignature>
      <fullMethod>testParseCorruptedToken()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication</package>
      <className>JWTBuilderTest</className>
      <methodName>setUp</methodName>
      <methodSignature>setUp()</methodSignature>
      <fullMethod>setUp()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>Application\Authentication</package>
      <className>JWTBuilderTest</className>
      <methodName>testBuildJWT</methodName>
      <methodSignature>testBuildJWT()</methodSignature>
      <fullMethod>testBuildJWT()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>Module</className>
      <methodName>getAutoloaderConfig</methodName>
      <methodSignature>getAutoloaderConfig()</methodSignature>
      <fullMethod>getAutoloaderConfig()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>Module</className>
      <methodName>getConfig</methodName>
      <methodSignature>getConfig($env = null)</methodSignature>
      <fullMethod>getConfig($env = null)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>getUrl</methodName>
      <methodSignature>getUrl()</methodSignature>
      <fullMethod>getUrl()</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>getToken</methodName>
      <methodSignature>getToken(Request $request)</methodSignature>
      <fullMethod>getToken(Request $request)</fullMethod>
      <crap>1</crap>
      <complexity>1</complexity>
      <coverage>100</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>__construct</methodName>
      <methodSignature>__construct()</methodSignature>
      <fullMethod>__construct()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>getInfo</methodName>
      <methodSignature>getInfo()</methodSignature>
      <fullMethod>getInfo()</fullMethod>
      <crap>20</crap>
      <complexity>4</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>getScope</methodName>
      <methodSignature>getScope($glue = ' ')</methodSignature>
      <fullMethod>getScope($glue = ' ')</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>getState</methodName>
      <methodSignature>getState()</methodSignature>
      <fullMethod>getState()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>generateState</methodName>
      <methodSignature>generateState()</methodSignature>
      <fullMethod>generateState()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>setOptions</methodName>
      <methodSignature>setOptions(ClientOptions $options)</methodSignature>
      <fullMethod>setOptions(ClientOptions $options)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>getOptions</methodName>
      <methodSignature>getOptions()</methodSignature>
      <fullMethod>getOptions()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>getError</methodName>
      <methodSignature>getError()</methodSignature>
      <fullMethod>getError()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>getSessionToken</methodName>
      <methodSignature>getSessionToken()</methodSignature>
      <fullMethod>getSessionToken()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>getSessionContainer</methodName>
      <methodSignature>getSessionContainer()</methodSignature>
      <fullMethod>getSessionContainer()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>getProvider</methodName>
      <methodSignature>getProvider()</methodSignature>
      <fullMethod>getProvider()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>setHttpClient</methodName>
      <methodSignature>setHttpClient($client)</methodSignature>
      <fullMethod>setHttpClient($client)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>AbstractOAuth2Client</className>
      <methodName>getHttpClient</methodName>
      <methodSignature>getHttpClient()</methodSignature>
      <fullMethod>getHttpClient()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Authentication\Adapter</package>
      <className>ZendOAuth2</className>
      <methodName>setOAuth2Client</methodName>
      <methodSignature>setOAuth2Client($oauth2)</methodSignature>
      <fullMethod>setOAuth2Client($oauth2)</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Authentication\Adapter</package>
      <className>ZendOAuth2</className>
      <methodName>authenticate</methodName>
      <methodSignature>authenticate()</methodSignature>
      <fullMethod>authenticate()</fullMethod>
      <crap>12</crap>
      <complexity>3</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Authentication\Adapter</package>
      <className>ZendOAuth2</className>
      <methodName>setEventManager</methodName>
      <methodSignature>setEventManager(EventManagerInterface $events)</methodSignature>
      <fullMethod>setEventManager(EventManagerInterface $events)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Authentication\Adapter</package>
      <className>ZendOAuth2</className>
      <methodName>getEventManager</methodName>
      <methodSignature>getEventManager()</methodSignature>
      <fullMethod>getEventManager()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>Facebook</className>
      <methodName>getUrl</methodName>
      <methodSignature>getUrl()</methodSignature>
      <fullMethod>getUrl()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>Facebook</className>
      <methodName>getToken</methodName>
      <methodSignature>getToken(Request $request)</methodSignature>
      <fullMethod>getToken(Request $request)</fullMethod>
      <crap>90</crap>
      <complexity>9</complexity>
      <coverage>0</coverage>
      <crapLoad>9</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>FacebookFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>Github</className>
      <methodName>getUrl</methodName>
      <methodSignature>getUrl()</methodSignature>
      <fullMethod>getUrl()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>Github</className>
      <methodName>getToken</methodName>
      <methodSignature>getToken(Request $request)</methodSignature>
      <fullMethod>getToken(Request $request)</fullMethod>
      <crap>56</crap>
      <complexity>7</complexity>
      <coverage>0</coverage>
      <crapLoad>7</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>GithubFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>Google</className>
      <methodName>getUrl</methodName>
      <methodSignature>getUrl()</methodSignature>
      <fullMethod>getUrl()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>Google</className>
      <methodName>getToken</methodName>
      <methodSignature>getToken(Request $request)</methodSignature>
      <fullMethod>getToken(Request $request)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>GoogleFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>LinkedIn</className>
      <methodName>getUrl</methodName>
      <methodSignature>getUrl()</methodSignature>
      <fullMethod>getUrl()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>LinkedIn</className>
      <methodName>getToken</methodName>
      <methodSignature>getToken(Request $request)</methodSignature>
      <fullMethod>getToken(Request $request)</fullMethod>
      <crap>72</crap>
      <complexity>8</complexity>
      <coverage>0</coverage>
      <crapLoad>8</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>LinkedIn</className>
      <methodName>getHttpclientResponse</methodName>
      <methodSignature>getHttpclientResponse()</methodSignature>
      <fullMethod>getHttpclientResponse()</fullMethod>
      <crap>6</crap>
      <complexity>2</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>LinkedIn</className>
      <methodName>getInfo</methodName>
      <methodSignature>getInfo()</methodSignature>
      <fullMethod>getInfo()</fullMethod>
      <crap>30</crap>
      <complexity>5</complexity>
      <coverage>0</coverage>
      <crapLoad>5</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2\Client</package>
      <className>LinkedInFactory</className>
      <methodName>createService</methodName>
      <methodSignature>createService(ServiceLocatorInterface $serviceLocator)</methodSignature>
      <fullMethod>createService(ServiceLocatorInterface $serviceLocator)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>getScope</methodName>
      <methodSignature>getScope()</methodSignature>
      <fullMethod>getScope()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>setScope</methodName>
      <methodSignature>setScope($scope)</methodSignature>
      <fullMethod>setScope($scope)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>getAuthUri</methodName>
      <methodSignature>getAuthUri()</methodSignature>
      <fullMethod>getAuthUri()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>setAuthUri</methodName>
      <methodSignature>setAuthUri($authUri)</methodSignature>
      <fullMethod>setAuthUri($authUri)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>getTokenUri</methodName>
      <methodSignature>getTokenUri()</methodSignature>
      <fullMethod>getTokenUri()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>setTokenUri</methodName>
      <methodSignature>setTokenUri($tokenUri)</methodSignature>
      <fullMethod>setTokenUri($tokenUri)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>getInfoUri</methodName>
      <methodSignature>getInfoUri()</methodSignature>
      <fullMethod>getInfoUri()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>setInfoUri</methodName>
      <methodSignature>setInfoUri($infoUri)</methodSignature>
      <fullMethod>setInfoUri($infoUri)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>getClientId</methodName>
      <methodSignature>getClientId()</methodSignature>
      <fullMethod>getClientId()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>setClientId</methodName>
      <methodSignature>setClientId($clientId)</methodSignature>
      <fullMethod>setClientId($clientId)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>getClientSecret</methodName>
      <methodSignature>getClientSecret()</methodSignature>
      <fullMethod>getClientSecret()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>setClientSecret</methodName>
      <methodSignature>setClientSecret($clientSecret)</methodSignature>
      <fullMethod>setClientSecret($clientSecret)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>getRedirectUri</methodName>
      <methodSignature>getRedirectUri()</methodSignature>
      <fullMethod>getRedirectUri()</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
    <method>
      <package>ZendOAuth2</package>
      <className>ClientOptions</className>
      <methodName>setRedirectUri</methodName>
      <methodSignature>setRedirectUri($redirectUri)</methodSignature>
      <fullMethod>setRedirectUri($redirectUri)</fullMethod>
      <crap>2</crap>
      <complexity>1</complexity>
      <coverage>0</coverage>
      <crapLoad>0</crapLoad>
    </method>
  </methods>
</crap_result>
